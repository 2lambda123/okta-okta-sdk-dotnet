### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.IUserTypesClient
  commentId: T:Okta.Sdk.IUserTypesClient
  id: IUserTypesClient
  parent: Okta.Sdk
  children:
  - Okta.Sdk.IUserTypesClient.CreateUserTypeAsync(Okta.Sdk.IUserType,System.Threading.CancellationToken)
  - Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUserTypesClient.GetUserTypeAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUserTypesClient.ListUserTypes
  - Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IUserTypesClient
  nameWithType: IUserTypesClient
  fullName: Okta.Sdk.IUserTypesClient
  type: Interface
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: IUserTypesClient
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 15
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: A client that works with Okta UserType resources.
  example: []
  syntax:
    content: public interface IUserTypesClient
    content.vb: Public Interface IUserTypesClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Okta.Sdk.IUserTypesClient.ListUserTypes
  commentId: M:Okta.Sdk.IUserTypesClient.ListUserTypes
  id: ListUserTypes
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: ListUserTypes()
  nameWithType: IUserTypesClient.ListUserTypes()
  fullName: Okta.Sdk.IUserTypesClient.ListUserTypes()
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserTypes
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 21
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetches all User Types in your org\n"
  example: []
  syntax:
    content: ICollectionClient<IUserType> ListUserTypes()
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IUserType}
      description: A collection of <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserTypes As ICollectionClient(Of IUserType)
  overload: Okta.Sdk.IUserTypesClient.ListUserTypes*
- uid: Okta.Sdk.IUserTypesClient.CreateUserTypeAsync(Okta.Sdk.IUserType,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUserTypesClient.CreateUserTypeAsync(Okta.Sdk.IUserType,System.Threading.CancellationToken)
  id: CreateUserTypeAsync(Okta.Sdk.IUserType,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: CreateUserTypeAsync(IUserType, CancellationToken)
  nameWithType: IUserTypesClient.CreateUserTypeAsync(IUserType, CancellationToken)
  fullName: Okta.Sdk.IUserTypesClient.CreateUserTypeAsync(Okta.Sdk.IUserType, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserTypeAsync
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 29
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.\n"
  example: []
  syntax:
    content: Task<IUserType> CreateUserTypeAsync(IUserType userType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userType
      type: Okta.Sdk.IUserType
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> resource.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserType}
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function CreateUserTypeAsync(userType As IUserType, cancellationToken As CancellationToken = Nothing) As Task(Of IUserType)
  overload: Okta.Sdk.IUserTypesClient.CreateUserTypeAsync*
- uid: Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync(System.String,System.Threading.CancellationToken)
  id: DeleteUserTypeAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: DeleteUserTypeAsync(String, CancellationToken)
  nameWithType: IUserTypesClient.DeleteUserTypeAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeleteUserTypeAsync
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 37
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDeletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users\n"
  example: []
  syntax:
    content: Task DeleteUserTypeAsync(string typeId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: typeId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function DeleteUserTypeAsync(typeId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync*
- uid: Okta.Sdk.IUserTypesClient.GetUserTypeAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUserTypesClient.GetUserTypeAsync(System.String,System.Threading.CancellationToken)
  id: GetUserTypeAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: GetUserTypeAsync(String, CancellationToken)
  nameWithType: IUserTypesClient.GetUserTypeAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUserTypesClient.GetUserTypeAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetUserTypeAsync
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 45
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.\n"
  example: []
  syntax:
    content: Task<IUserType> GetUserTypeAsync(string typeId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: typeId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserType}
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetUserTypeAsync(typeId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUserType)
  overload: Okta.Sdk.IUserTypesClient.GetUserTypeAsync*
- uid: Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  id: UpdateUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: UpdateUserTypeAsync(IUserType, String, CancellationToken)
  nameWithType: IUserTypesClient.UpdateUserTypeAsync(IUserType, String, CancellationToken)
  fullName: Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync(Okta.Sdk.IUserType, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UpdateUserTypeAsync
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 54
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUpdates an existing User Type\n"
  example: []
  syntax:
    content: Task<IUserType> UpdateUserTypeAsync(IUserType userType, string typeId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userType
      type: Okta.Sdk.IUserType
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> resource.
    - id: typeId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserType}
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function UpdateUserTypeAsync(userType As IUserType, typeId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUserType)
  overload: Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync*
- uid: Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  id: ReplaceUserTypeAsync(Okta.Sdk.IUserType,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUserTypesClient
  langs:
  - csharp
  - vb
  name: ReplaceUserTypeAsync(IUserType, String, CancellationToken)
  nameWithType: IUserTypesClient.ReplaceUserTypeAsync(IUserType, String, CancellationToken)
  fullName: Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync(Okta.Sdk.IUserType, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ReplaceUserTypeAsync
    path: ../src/Okta.Sdk/Generated/IUserTypesClient.Generated.cs
    startLine: 63
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nReplace an existing User Type\n"
  example: []
  syntax:
    content: Task<IUserType> ReplaceUserTypeAsync(IUserType userType, string typeId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userType
      type: Okta.Sdk.IUserType
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> resource.
    - id: typeId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserType}
      description: The <xref href="Okta.Sdk.IUserType" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ReplaceUserTypeAsync(userType As IUserType, typeId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUserType)
  overload: Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync*
references:
- uid: Okta.Sdk
  commentId: N:Okta.Sdk
  name: Okta.Sdk
  nameWithType: Okta.Sdk
  fullName: Okta.Sdk
- uid: Okta.Sdk.IUserType
  commentId: T:Okta.Sdk.IUserType
  parent: Okta.Sdk
  name: IUserType
  nameWithType: IUserType
  fullName: Okta.Sdk.IUserType
- uid: Okta.Sdk.IUserTypesClient.ListUserTypes*
  commentId: Overload:Okta.Sdk.IUserTypesClient.ListUserTypes
  name: ListUserTypes
  nameWithType: IUserTypesClient.ListUserTypes
  fullName: Okta.Sdk.IUserTypesClient.ListUserTypes
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IUserType}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IUserType}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IUserType>
  nameWithType: ICollectionClient<IUserType>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IUserType>
  nameWithType.vb: ICollectionClient(Of IUserType)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IUserType)
  name.vb: ICollectionClient(Of IUserType)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUserType
    name: IUserType
    nameWithType: IUserType
    fullName: Okta.Sdk.IUserType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUserType
    name: IUserType
    nameWithType: IUserType
    fullName: Okta.Sdk.IUserType
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.ICollectionClient`1
  commentId: T:Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<T>
  nameWithType: ICollectionClient<T>
  fullName: Okta.Sdk.ICollectionClient<T>
  nameWithType.vb: ICollectionClient(Of T)
  fullName.vb: Okta.Sdk.ICollectionClient(Of T)
  name.vb: ICollectionClient(Of T)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUserTypesClient.CreateUserTypeAsync*
  commentId: Overload:Okta.Sdk.IUserTypesClient.CreateUserTypeAsync
  name: CreateUserTypeAsync
  nameWithType: IUserTypesClient.CreateUserTypeAsync
  fullName: Okta.Sdk.IUserTypesClient.CreateUserTypeAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Okta.Sdk.IUserType}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IUserType}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserType>
  nameWithType: Task<IUserType>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IUserType>
  nameWithType.vb: Task(Of IUserType)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IUserType)
  name.vb: Task(Of IUserType)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUserType
    name: IUserType
    nameWithType: IUserType
    fullName: Okta.Sdk.IUserType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUserType
    name: IUserType
    nameWithType: IUserType
    fullName: Okta.Sdk.IUserType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync*
  commentId: Overload:Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync
  name: DeleteUserTypeAsync
  nameWithType: IUserTypesClient.DeleteUserTypeAsync
  fullName: Okta.Sdk.IUserTypesClient.DeleteUserTypeAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Okta.Sdk.IUserTypesClient.GetUserTypeAsync*
  commentId: Overload:Okta.Sdk.IUserTypesClient.GetUserTypeAsync
  name: GetUserTypeAsync
  nameWithType: IUserTypesClient.GetUserTypeAsync
  fullName: Okta.Sdk.IUserTypesClient.GetUserTypeAsync
- uid: Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync*
  commentId: Overload:Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync
  name: UpdateUserTypeAsync
  nameWithType: IUserTypesClient.UpdateUserTypeAsync
  fullName: Okta.Sdk.IUserTypesClient.UpdateUserTypeAsync
- uid: Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync*
  commentId: Overload:Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync
  name: ReplaceUserTypeAsync
  nameWithType: IUserTypesClient.ReplaceUserTypeAsync
  fullName: Okta.Sdk.IUserTypesClient.ReplaceUserTypeAsync
