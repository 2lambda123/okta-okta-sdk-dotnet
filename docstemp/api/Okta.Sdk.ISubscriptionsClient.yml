### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.ISubscriptionsClient
  commentId: T:Okta.Sdk.ISubscriptionsClient
  id: ISubscriptionsClient
  parent: Okta.Sdk
  children:
  - Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions(System.String)
  - Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ISubscriptionsClient
  nameWithType: ISubscriptionsClient
  fullName: Okta.Sdk.ISubscriptionsClient
  type: Interface
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ISubscriptionsClient
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 15
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: A client that works with Okta Subscription resources.
  example: []
  syntax:
    content: public interface ISubscriptionsClient
    content.vb: Public Interface ISubscriptionsClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions(System.String)
  commentId: M:Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions(System.String)
  id: ListRoleSubscriptions(System.String)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: ListRoleSubscriptions(String)
  nameWithType: ISubscriptionsClient.ListRoleSubscriptions(String)
  fullName: Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListRoleSubscriptions
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 22
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nWhen roleType List all subscriptions of a Role. Else when roleId List subscriptions of a Custom Role\n"
  example: []
  syntax:
    content: ICollectionClient<ISubscription> ListRoleSubscriptions(string roleTypeOrRoleId)
    parameters:
    - id: roleTypeOrRoleId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
      description: A collection of <xref href="Okta.Sdk.ISubscription" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListRoleSubscriptions(roleTypeOrRoleId As String) As ICollectionClient(Of ISubscription)
  overload: Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions*
- uid: Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: GetRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetRoleSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 31
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nWhen roleType Get subscriptions of a Role with a specific notification type. Else when roleId Get subscription of a Custom Role with a specific notification type.\n"
  example: []
  syntax:
    content: Task<ISubscription> GetRoleSubscriptionByNotificationTypeAsync(string roleTypeOrRoleId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: roleTypeOrRoleId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
      description: The <xref href="Okta.Sdk.ISubscription" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetRoleSubscriptionByNotificationTypeAsync(roleTypeOrRoleId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task(Of ISubscription)
  overload: Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync*
- uid: Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: SubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: SubscribeRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: SubscribeRoleSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 40
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nWhen roleType Subscribes a Role to a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Subscribes a Custom Role to a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.\n"
  example: []
  syntax:
    content: Task SubscribeRoleSubscriptionByNotificationTypeAsync(string roleTypeOrRoleId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: roleTypeOrRoleId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function SubscribeRoleSubscriptionByNotificationTypeAsync(roleTypeOrRoleId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync*
- uid: Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: UnsubscribeRoleSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: UnsubscribeRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UnsubscribeRoleSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 49
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nWhen roleType Unsubscribes a Role from a specific notification type. When you change the subscription status of a Role, it overrides the subscription of any individual user of that Role. Else when roleId Unsubscribes a Custom Role from a specific notification type. When you change the subscription status of a Custom Role, it overrides the subscription of any individual user of that Custom Role.\n"
  example: []
  syntax:
    content: Task UnsubscribeRoleSubscriptionByNotificationTypeAsync(string roleTypeOrRoleId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: roleTypeOrRoleId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function UnsubscribeRoleSubscriptionByNotificationTypeAsync(roleTypeOrRoleId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync*
- uid: Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: SubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: SubscribeUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: SubscribeUserSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 58
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSubscribes a User to a specific notification type. Only the current User can subscribe to a specific notification type. An AccessDeniedException message is sent if requests are made from other users.\n"
  example: []
  syntax:
    content: Task SubscribeUserSubscriptionByNotificationTypeAsync(string userId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function SubscribeUserSubscriptionByNotificationTypeAsync(userId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync*
- uid: Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: UnsubscribeUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.ISubscriptionsClient
  langs:
  - csharp
  - vb
  name: UnsubscribeUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UnsubscribeUserSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/ISubscriptionsClient.Generated.cs
    startLine: 67
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUnsubscribes a User from a specific notification type. Only the current User can unsubscribe from a specific notification type. An AccessDeniedException message is sent if requests are made from other users.\n"
  example: []
  syntax:
    content: Task UnsubscribeUserSubscriptionByNotificationTypeAsync(string userId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function UnsubscribeUserSubscriptionByNotificationTypeAsync(userId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync*
references:
- uid: Okta.Sdk
  commentId: N:Okta.Sdk
  name: Okta.Sdk
  nameWithType: Okta.Sdk
  fullName: Okta.Sdk
- uid: Okta.Sdk.ISubscription
  commentId: T:Okta.Sdk.ISubscription
  parent: Okta.Sdk
  name: ISubscription
  nameWithType: ISubscription
  fullName: Okta.Sdk.ISubscription
- uid: Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions
  name: ListRoleSubscriptions
  nameWithType: ISubscriptionsClient.ListRoleSubscriptions
  fullName: Okta.Sdk.ISubscriptionsClient.ListRoleSubscriptions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<ISubscription>
  nameWithType: ICollectionClient<ISubscription>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.ISubscription>
  nameWithType.vb: ICollectionClient(Of ISubscription)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.ISubscription)
  name.vb: ICollectionClient(Of ISubscription)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Okta.Sdk.ICollectionClient`1
  commentId: T:Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<T>
  nameWithType: ICollectionClient<T>
  fullName: Okta.Sdk.ICollectionClient<T>
  nameWithType.vb: ICollectionClient(Of T)
  fullName.vb: Okta.Sdk.ICollectionClient(Of T)
  name.vb: ICollectionClient(Of T)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync
  name: GetRoleSubscriptionByNotificationTypeAsync
  nameWithType: ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.ISubscriptionsClient.GetRoleSubscriptionByNotificationTypeAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ISubscription>
  nameWithType: Task<ISubscription>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.ISubscription>
  nameWithType.vb: Task(Of ISubscription)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.ISubscription)
  name.vb: Task(Of ISubscription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync
  name: SubscribeRoleSubscriptionByNotificationTypeAsync
  nameWithType: ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.ISubscriptionsClient.SubscribeRoleSubscriptionByNotificationTypeAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync
  name: UnsubscribeRoleSubscriptionByNotificationTypeAsync
  nameWithType: ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.ISubscriptionsClient.UnsubscribeRoleSubscriptionByNotificationTypeAsync
- uid: Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync
  name: SubscribeUserSubscriptionByNotificationTypeAsync
  nameWithType: ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.ISubscriptionsClient.SubscribeUserSubscriptionByNotificationTypeAsync
- uid: Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync
  name: UnsubscribeUserSubscriptionByNotificationTypeAsync
  nameWithType: ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.ISubscriptionsClient.UnsubscribeUserSubscriptionByNotificationTypeAsync
