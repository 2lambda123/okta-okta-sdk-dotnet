### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.Internal.ResourceFactory
  commentId: T:Okta.Sdk.Internal.ResourceFactory
  id: ResourceFactory
  parent: Okta.Sdk.Internal
  children:
  - Okta.Sdk.Internal.ResourceFactory.#ctor(Okta.Sdk.IOktaClient,Microsoft.Extensions.Logging.ILogger)
  - Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Okta.Sdk.Internal.ResourceFactory.CreateNew``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  - Okta.Sdk.Internal.ResourceFactory.NewDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: ResourceFactory
  nameWithType: ResourceFactory
  fullName: Okta.Sdk.Internal.ResourceFactory
  type: Class
  source:
    remote:
      path: src/Okta.Sdk/Internal/ResourceFactory.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ResourceFactory
    path: ../src/Okta.Sdk/Internal/ResourceFactory.cs
    startLine: 16
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nConstructs <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref>s based on deserialized dictionaries.\n"
  example: []
  syntax:
    content: public sealed class ResourceFactory
    content.vb: Public NotInheritable Class ResourceFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Okta.Sdk.Internal.ResourceFactory.#ctor(Okta.Sdk.IOktaClient,Microsoft.Extensions.Logging.ILogger)
  commentId: M:Okta.Sdk.Internal.ResourceFactory.#ctor(Okta.Sdk.IOktaClient,Microsoft.Extensions.Logging.ILogger)
  id: '#ctor(Okta.Sdk.IOktaClient,Microsoft.Extensions.Logging.ILogger)'
  parent: Okta.Sdk.Internal.ResourceFactory
  langs:
  - csharp
  - vb
  name: ResourceFactory(IOktaClient, ILogger)
  nameWithType: ResourceFactory.ResourceFactory(IOktaClient, ILogger)
  fullName: Okta.Sdk.Internal.ResourceFactory.ResourceFactory(Okta.Sdk.IOktaClient, Microsoft.Extensions.Logging.ILogger)
  type: Constructor
  source:
    remote:
      path: src/Okta.Sdk/Internal/ResourceFactory.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: .ctor
    path: ../src/Okta.Sdk/Internal/ResourceFactory.cs
    startLine: 26
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nInitializes a new instance of the <xref href=\"Okta.Sdk.Internal.ResourceFactory\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ResourceFactory(IOktaClient client, ILogger logger)
    parameters:
    - id: client
      type: Okta.Sdk.IOktaClient
      description: The client.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
      description: The logging interface.
    content.vb: Public Sub New(client As IOktaClient, logger As ILogger)
  overload: Okta.Sdk.Internal.ResourceFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Okta.Sdk.Internal.ResourceFactory.NewDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Okta.Sdk.Internal.ResourceFactory.NewDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: NewDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Okta.Sdk.Internal.ResourceFactory
  langs:
  - csharp
  - vb
  name: NewDictionary(IDictionary<String, Object>)
  nameWithType: ResourceFactory.NewDictionary(IDictionary<String, Object>)
  fullName: Okta.Sdk.Internal.ResourceFactory.NewDictionary(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/ResourceFactory.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: NewDictionary
    path: ../src/Okta.Sdk/Internal/ResourceFactory.cs
    startLine: 37
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nCreates a new dictionary with the specified behavior.\n"
  example: []
  syntax:
    content: public IDictionary<string, object> NewDictionary(IDictionary<string, object> existingData)
    parameters:
    - id: existingData
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The initial dictionary data.
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A new dictionary with the specified behavior.
    content.vb: Public Function NewDictionary(existingData As IDictionary(Of String, Object)) As IDictionary(Of String, Object)
  overload: Okta.Sdk.Internal.ResourceFactory.NewDictionary*
  nameWithType.vb: ResourceFactory.NewDictionary(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Okta.Sdk.Internal.ResourceFactory.NewDictionary(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: NewDictionary(IDictionary(Of String, Object))
- uid: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateFromExistingData``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Okta.Sdk.Internal.ResourceFactory
  langs:
  - csharp
  - vb
  name: CreateFromExistingData<T>(IDictionary<String, Object>)
  nameWithType: ResourceFactory.CreateFromExistingData<T>(IDictionary<String, Object>)
  fullName: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData<T>(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/ResourceFactory.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateFromExistingData
    path: ../src/Okta.Sdk/Internal/ResourceFactory.cs
    startLine: 50
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nCreates a new <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> from an existing dictionary.\n"
  example: []
  syntax:
    content: public T CreateFromExistingData<T>(IDictionary<string, object> existingDictionary)
    parameters:
    - id: existingDictionary
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The existing dictionary.
    typeParameters:
    - id: T
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type.
    return:
      type: '{T}'
      description: The created <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function CreateFromExistingData(Of T)(existingDictionary As IDictionary(Of String, Object)) As T
  overload: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData*
  nameWithType.vb: ResourceFactory.CreateFromExistingData(Of T)(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData(Of T)(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateFromExistingData(Of T)(IDictionary(Of String, Object))
- uid: Okta.Sdk.Internal.ResourceFactory.CreateNew``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Okta.Sdk.Internal.ResourceFactory.CreateNew``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateNew``1(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Okta.Sdk.Internal.ResourceFactory
  langs:
  - csharp
  - vb
  name: CreateNew<T>(IDictionary<String, Object>)
  nameWithType: ResourceFactory.CreateNew<T>(IDictionary<String, Object>)
  fullName: Okta.Sdk.Internal.ResourceFactory.CreateNew<T>(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/ResourceFactory.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateNew
    path: ../src/Okta.Sdk/Internal/ResourceFactory.cs
    startLine: 72
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nCreates a new <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> with the specified data.\n"
  example: []
  syntax:
    content: public T CreateNew<T>(IDictionary<string, object> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The initial data.
    typeParameters:
    - id: T
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type.
    return:
      type: '{T}'
      description: The created <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function CreateNew(Of T)(data As IDictionary(Of String, Object)) As T
  overload: Okta.Sdk.Internal.ResourceFactory.CreateNew*
  nameWithType.vb: ResourceFactory.CreateNew(Of T)(IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Okta.Sdk.Internal.ResourceFactory.CreateNew(Of T)(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateNew(Of T)(IDictionary(Of String, Object))
references:
- uid: Okta.Sdk.Resource
  commentId: T:Okta.Sdk.Resource
  parent: Okta.Sdk
  name: Resource
  nameWithType: Resource
  fullName: Okta.Sdk.Resource
- uid: Okta.Sdk.Internal
  commentId: N:Okta.Sdk.Internal
  name: Okta.Sdk.Internal
  nameWithType: Okta.Sdk.Internal
  fullName: Okta.Sdk.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk
  commentId: N:Okta.Sdk
  name: Okta.Sdk
  nameWithType: Okta.Sdk
  fullName: Okta.Sdk
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Okta.Sdk.Internal.ResourceFactory
  commentId: T:Okta.Sdk.Internal.ResourceFactory
  parent: Okta.Sdk.Internal
  name: ResourceFactory
  nameWithType: ResourceFactory
  fullName: Okta.Sdk.Internal.ResourceFactory
- uid: Okta.Sdk.Internal.ResourceFactory.#ctor*
  commentId: Overload:Okta.Sdk.Internal.ResourceFactory.#ctor
  name: ResourceFactory
  nameWithType: ResourceFactory.ResourceFactory
  fullName: Okta.Sdk.Internal.ResourceFactory.ResourceFactory
- uid: Okta.Sdk.IOktaClient
  commentId: T:Okta.Sdk.IOktaClient
  parent: Okta.Sdk
  name: IOktaClient
  nameWithType: IOktaClient
  fullName: Okta.Sdk.IOktaClient
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Okta.Sdk.Internal.ResourceFactory.NewDictionary*
  commentId: Overload:Okta.Sdk.Internal.ResourceFactory.NewDictionary
  name: NewDictionary
  nameWithType: ResourceFactory.NewDictionary
  fullName: Okta.Sdk.Internal.ResourceFactory.NewDictionary
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData*
  commentId: Overload:Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData
  name: CreateFromExistingData
  nameWithType: ResourceFactory.CreateFromExistingData
  fullName: Okta.Sdk.Internal.ResourceFactory.CreateFromExistingData
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Okta.Sdk.Internal.ResourceFactory.CreateNew*
  commentId: Overload:Okta.Sdk.Internal.ResourceFactory.CreateNew
  name: CreateNew
  nameWithType: ResourceFactory.CreateNew
  fullName: Okta.Sdk.Internal.ResourceFactory.CreateNew
