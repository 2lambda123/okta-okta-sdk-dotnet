### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.Internal.IResourceTypeResolver
  commentId: T:Okta.Sdk.Internal.IResourceTypeResolver
  id: IResourceTypeResolver
  parent: Okta.Sdk.Internal
  children:
  - Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType(System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: IResourceTypeResolver
  nameWithType: IResourceTypeResolver
  fullName: Okta.Sdk.Internal.IResourceTypeResolver
  type: Interface
  source:
    remote:
      path: src/Okta.Sdk/Internal/IResourceTypeResolver.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: IResourceTypeResolver
    path: ../src/Okta.Sdk/Internal/IResourceTypeResolver.cs
    startLine: 11
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: A type resolver that works with Okta resources.
  example: []
  syntax:
    content: public interface IResourceTypeResolver
    content.vb: Public Interface IResourceTypeResolver
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType(System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: GetResolvedType(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Okta.Sdk.Internal.IResourceTypeResolver
  langs:
  - csharp
  - vb
  name: GetResolvedType(IDictionary<String, Object>)
  nameWithType: IResourceTypeResolver.GetResolvedType(IDictionary<String, Object>)
  fullName: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType(System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IResourceTypeResolver.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetResolvedType
    path: ../src/Okta.Sdk/Internal/IResourceTypeResolver.cs
    startLine: 18
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nGets the resolved type based on the data\n"
  example: []
  syntax:
    content: Type GetResolvedType(IDictionary<string, object> data)
    parameters:
    - id: data
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The data
    return:
      type: System.Type
      description: The resource type
    content.vb: Function GetResolvedType(data As IDictionary(Of String, Object)) As Type
  overload: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType*
  nameWithType.vb: IResourceTypeResolver.GetResolvedType(IDictionary(Of String, Object))
  fullName.vb: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType(System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: GetResolvedType(IDictionary(Of String, Object))
references:
- uid: Okta.Sdk.Internal
  commentId: N:Okta.Sdk.Internal
  name: Okta.Sdk.Internal
  nameWithType: Okta.Sdk.Internal
  fullName: Okta.Sdk.Internal
- uid: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType*
  commentId: Overload:Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType
  name: GetResolvedType
  nameWithType: IResourceTypeResolver.GetResolvedType
  fullName: Okta.Sdk.Internal.IResourceTypeResolver.GetResolvedType
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
