### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.IUsersClient
  commentId: T:Okta.Sdk.IUsersClient
  id: IUsersClient
  parent: Okta.Sdk
  children:
  - Okta.Sdk.IUsersClient.ActivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ChangePasswordAsync(System.String,Okta.Sdk.ChangePasswordOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(Okta.Sdk.IUserCredentials,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(System.String,Okta.Sdk.ChangeRecoveryQuestionOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ClearUserSessionsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithImportedHashedPasswordOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithoutCredentialsOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithProviderOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithRecoveryQuestionOptions,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.ICreateUserRequest,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Okta.Sdk.UserNextLogin,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String)
  - Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.DeactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ExpirePasswordAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.GetLinkedObjectsForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.GetUserAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.GetUserGrantAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.GetUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.ListAppLinks(System.String)
  - Okta.Sdk.IUsersClient.ListAssignedRolesForUser(System.String,System.String)
  - Okta.Sdk.IUsersClient.ListGrantsForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.ListGroupTargetsForRole(System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.ListUserClients(System.String)
  - Okta.Sdk.IUsersClient.ListUserGrants(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  - Okta.Sdk.IUsersClient.ListUserGroups(System.String)
  - Okta.Sdk.IUsersClient.ListUserIdentityProviders(System.String)
  - Okta.Sdk.IUsersClient.ListUsers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  - Okta.Sdk.IUsersClient.ListUserSubscriptions(System.String)
  - Okta.Sdk.IUsersClient.PartialUpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ReactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ResetFactorsAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.ResetPasswordAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RevokeUserGrantAsync(System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.RevokeUserGrantsAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.SuspendUserAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.UnlockUserAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.UnsuspendUserAsync(System.String,System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  - Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IUsersClient
  nameWithType: IUsersClient
  fullName: Okta.Sdk.IUsersClient
  type: Interface
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: IUsersClient
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 13
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: A client that works with Okta User resources.
  example: []
  syntax:
    content: 'public interface IUsersClient : IAsyncEnumerable<IUser>'
    content.vb: >-
      Public Interface IUsersClient

          Inherits IAsyncEnumerable(Of IUser)
  inheritedMembers:
  - System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}.GetAsyncEnumerator(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Okta.Sdk.IUsersClient.ListUsers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListUsers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  id: ListUsers(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUsers(String, String, Nullable<Int32>, String, String, String, String)
  nameWithType: IUsersClient.ListUsers(String, String, Nullable<Int32>, String, String, String, String)
  fullName: Okta.Sdk.IUsersClient.ListUsers(System.String, System.String, System.Nullable<System.Int32>, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUsers
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 28
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists users in your organization with pagination in most cases.  A subset of users can be returned that match a supported filter expression or search criteria.\n"
  example: []
  syntax:
    content: ICollectionClient<IUser> ListUsers(string q = null, string after = null, int? limit = 10, string filter = null, string search = null, string sortBy = null, string sortOrder = null)
    parameters:
    - id: q
      type: System.String
      description: Finds a user that matches firstName, lastName, and email properties
    - id: after
      type: System.String
      description: Specifies the pagination cursor for the next page of users
    - id: limit
      type: System.Nullable{System.Int32}
      description: Specifies the number of results returned
    - id: filter
      type: System.String
      description: Filters users with a supported expression for a subset of properties
    - id: search
      type: System.String
      description: Searches for users with a supported filtering  expression for most properties
    - id: sortBy
      type: System.String
      description: ''
    - id: sortOrder
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IUser}
      description: A collection of <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUsers(q As String = Nothing, after As String = Nothing, limit As Integer? = 10, filter As String = Nothing, search As String = Nothing, sortBy As String = Nothing, sortOrder As String = Nothing) As ICollectionClient(Of IUser)
  overload: Okta.Sdk.IUsersClient.ListUsers*
  nameWithType.vb: IUsersClient.ListUsers(String, String, Nullable(Of Int32), String, String, String, String)
  fullName.vb: Okta.Sdk.IUsersClient.ListUsers(System.String, System.String, System.Nullable(Of System.Int32), System.String, System.String, System.String, System.String)
  name.vb: ListUsers(String, String, Nullable(Of Int32), String, String, String, String)
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.ICreateUserRequest,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Okta.Sdk.UserNextLogin,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.ICreateUserRequest,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Okta.Sdk.UserNextLogin,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.ICreateUserRequest,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Okta.Sdk.UserNextLogin,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(ICreateUserRequest, Nullable<Boolean>, Nullable<Boolean>, UserNextLogin, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(ICreateUserRequest, Nullable<Boolean>, Nullable<Boolean>, UserNextLogin, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.ICreateUserRequest, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>, Okta.Sdk.UserNextLogin, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 39
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization with or without credentials.\n"
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(ICreateUserRequest body, bool? activate = true, bool? provider = false, UserNextLogin nextLogin = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: body
      type: Okta.Sdk.ICreateUserRequest
      description: The <xref href="Okta.Sdk.ICreateUserRequest" data-throw-if-not-resolved="false"></xref> resource.
    - id: activate
      type: System.Nullable{System.Boolean}
      description: Executes activation lifecycle operation when creating the user
    - id: provider
      type: System.Nullable{System.Boolean}
      description: Indicates whether to create a user with a specified authentication provider
    - id: nextLogin
      type: Okta.Sdk.UserNextLogin
      description: With activate=true, set nextLogin to &quot;changePassword&quot; to have the password be EXPIRED, so user must change it the next time they log in.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function CreateUserAsync(body As ICreateUserRequest, activate As Boolean? = True, provider As Boolean? = False, nextLogin As UserNextLogin = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
  nameWithType.vb: IUsersClient.CreateUserAsync(ICreateUserRequest, Nullable(Of Boolean), Nullable(Of Boolean), UserNextLogin, CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.ICreateUserRequest, System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean), Okta.Sdk.UserNextLogin, System.Threading.CancellationToken)
  name.vb: CreateUserAsync(ICreateUserRequest, Nullable(Of Boolean), Nullable(Of Boolean), UserNextLogin, CancellationToken)
- uid: Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetLinkedObjectForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: SetLinkedObjectForUserAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.SetLinkedObjectForUserAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: SetLinkedObjectForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 49
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\n\n"
  example: []
  syntax:
    content: Task SetLinkedObjectForUserAsync(string associatedUserId, string primaryRelationshipName, string primaryUserId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: associatedUserId
      type: System.String
      description: ''
    - id: primaryRelationshipName
      type: System.String
      description: ''
    - id: primaryUserId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function SetLinkedObjectForUserAsync(associatedUserId As String, primaryRelationshipName As String, primaryUserId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync*
- uid: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: DeactivateOrDeleteUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: DeactivateOrDeleteUserAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.DeactivateOrDeleteUserAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeactivateOrDeleteUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 58
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDeletes a user permanently.  This operation can only be performed on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**\n"
  example: []
  syntax:
    content: Task DeactivateOrDeleteUserAsync(string userId, bool? sendEmail = false, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function DeactivateOrDeleteUserAsync(userId As String, sendEmail As Boolean? = False, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync*
  nameWithType.vb: IUsersClient.DeactivateOrDeleteUserAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: DeactivateOrDeleteUserAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.GetUserAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.GetUserAsync(System.String,System.Threading.CancellationToken)
  id: GetUserAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetUserAsync(String, CancellationToken)
  nameWithType: IUsersClient.GetUserAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.GetUserAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 66
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetches a user from your Okta organization.\n"
  example: []
  syntax:
    content: Task<IUser> GetUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetUserAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.GetUserAsync*
- uid: Okta.Sdk.IUsersClient.PartialUpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.PartialUpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: PartialUpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: PartialUpdateUserAsync(IUser, String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.PartialUpdateUserAsync(IUser, String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.PartialUpdateUserAsync(Okta.Sdk.IUser, System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: PartialUpdateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 76
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetch a user by `id`, `login`, or `login shortname` if the short name is unambiguous.\n"
  example: []
  syntax:
    content: Task<IUser> PartialUpdateUserAsync(IUser user, string userId, bool? strict = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: user
      type: Okta.Sdk.IUser
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: ''
    - id: strict
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function PartialUpdateUserAsync(user As IUser, userId As String, strict As Boolean? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.PartialUpdateUserAsync*
  nameWithType.vb: IUsersClient.PartialUpdateUserAsync(IUser, String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.PartialUpdateUserAsync(Okta.Sdk.IUser, System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: PartialUpdateUserAsync(IUser, String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: UpdateUserAsync(IUser, String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.UpdateUserAsync(IUser, String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser, System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UpdateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 86
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUpdate a user&apos;s profile and/or credentials using strict-update semantics.\n"
  example: []
  syntax:
    content: Task<IUser> UpdateUserAsync(IUser user, string userId, bool? strict = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: user
      type: Okta.Sdk.IUser
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: ''
    - id: strict
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function UpdateUserAsync(user As IUser, userId As String, strict As Boolean? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.UpdateUserAsync*
  nameWithType.vb: IUsersClient.UpdateUserAsync(IUser, String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser, System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: UpdateUserAsync(IUser, String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ListAppLinks(System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListAppLinks(System.String)
  id: ListAppLinks(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListAppLinks(String)
  nameWithType: IUsersClient.ListAppLinks(String)
  fullName: Okta.Sdk.IUsersClient.ListAppLinks(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListAppLinks
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 93
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetches appLinks for all direct or indirect (via group membership) assigned applications.\n"
  example: []
  syntax:
    content: ICollectionClient<IAppLink> ListAppLinks(string userId)
    parameters:
    - id: userId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IAppLink}
      description: A collection of <xref href="Okta.Sdk.IAppLink" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListAppLinks(userId As String) As ICollectionClient(Of IAppLink)
  overload: Okta.Sdk.IUsersClient.ListAppLinks*
- uid: Okta.Sdk.IUsersClient.ListUserClients(System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListUserClients(System.String)
  id: ListUserClients(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUserClients(String)
  nameWithType: IUsersClient.ListUserClients(String)
  fullName: Okta.Sdk.IUsersClient.ListUserClients(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserClients
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 100
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all client resources for which the specified user has grants or tokens.\n"
  example: []
  syntax:
    content: ICollectionClient<IOAuth2Client> ListUserClients(string userId)
    parameters:
    - id: userId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2Client}
      description: A collection of <xref href="Okta.Sdk.IOAuth2Client" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserClients(userId As String) As ICollectionClient(Of IOAuth2Client)
  overload: Okta.Sdk.IUsersClient.ListUserClients*
- uid: Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RevokeGrantsForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RevokeGrantsForUserAndClientAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.RevokeGrantsForUserAndClientAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RevokeGrantsForUserAndClientAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 109
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRevokes all grants for the specified user and client\n"
  example: []
  syntax:
    content: Task RevokeGrantsForUserAndClientAsync(string userId, string clientId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RevokeGrantsForUserAndClientAsync(userId As String, clientId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync*
- uid: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.ListGrantsForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  id: ListGrantsForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListGrantsForUserAndClient(String, String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.ListGrantsForUserAndClient(String, String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient(System.String, System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListGrantsForUserAndClient
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 120
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all grants for a specified user and client\n"
  example: []
  syntax:
    content: ICollectionClient<IOAuth2ScopeConsentGrant> ListGrantsForUserAndClient(string userId, string clientId, string expand = null, string after = null, int? limit = 20)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2ScopeConsentGrant}
      description: A collection of <xref href="Okta.Sdk.IOAuth2ScopeConsentGrant" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListGrantsForUserAndClient(userId As String, clientId As String, expand As String = Nothing, after As String = Nothing, limit As Integer? = 20) As ICollectionClient(Of IOAuth2ScopeConsentGrant)
  overload: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient*
  nameWithType.vb: IUsersClient.ListGrantsForUserAndClient(String, String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient(System.String, System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: ListGrantsForUserAndClient(String, String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RevokeTokensForUserAndClientAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RevokeTokensForUserAndClientAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.RevokeTokensForUserAndClientAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RevokeTokensForUserAndClientAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 129
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRevokes all refresh tokens issued for the specified User and Client.\n"
  example: []
  syntax:
    content: Task RevokeTokensForUserAndClientAsync(string userId, string clientId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RevokeTokensForUserAndClientAsync(userId As String, clientId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync*
- uid: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  id: ListRefreshTokensForUserAndClient(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListRefreshTokensForUserAndClient(String, String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.ListRefreshTokensForUserAndClient(String, String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient(System.String, System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListRefreshTokensForUserAndClient
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 140
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all refresh tokens issued for the specified User and Client.\n"
  example: []
  syntax:
    content: ICollectionClient<IOAuth2RefreshToken> ListRefreshTokensForUserAndClient(string userId, string clientId, string expand = null, string after = null, int? limit = 20)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2RefreshToken}
      description: A collection of <xref href="Okta.Sdk.IOAuth2RefreshToken" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListRefreshTokensForUserAndClient(userId As String, clientId As String, expand As String = Nothing, after As String = Nothing, limit As Integer? = 20) As ICollectionClient(Of IOAuth2RefreshToken)
  overload: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient*
  nameWithType.vb: IUsersClient.ListRefreshTokensForUserAndClient(String, String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient(System.String, System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: ListRefreshTokensForUserAndClient(String, String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: RevokeTokenForUserAndClientAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RevokeTokenForUserAndClientAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.RevokeTokenForUserAndClientAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RevokeTokenForUserAndClientAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 150
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRevokes the specified refresh token.\n"
  example: []
  syntax:
    content: Task RevokeTokenForUserAndClientAsync(string userId, string clientId, string tokenId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: tokenId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RevokeTokenForUserAndClientAsync(userId As String, clientId As String, tokenId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync*
- uid: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)
  id: GetRefreshTokenForUserAndClientAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetRefreshTokenForUserAndClientAsync(String, String, String, String, Nullable<Int32>, String, CancellationToken)
  nameWithType: IUsersClient.GetRefreshTokenForUserAndClientAsync(String, String, String, String, Nullable<Int32>, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync(System.String, System.String, System.String, System.String, System.Nullable<System.Int32>, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetRefreshTokenForUserAndClientAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 163
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGets a refresh token issued for the specified User and Client.\n"
  example: []
  syntax:
    content: Task<IOAuth2RefreshToken> GetRefreshTokenForUserAndClientAsync(string userId, string clientId, string tokenId, string expand = null, int? limit = 20, string after = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: clientId
      type: System.String
      description: ''
    - id: tokenId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IOAuth2RefreshToken}
      description: The <xref href="Okta.Sdk.IOAuth2RefreshToken" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetRefreshTokenForUserAndClientAsync(userId As String, clientId As String, tokenId As String, expand As String = Nothing, limit As Integer? = 20, after As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IOAuth2RefreshToken)
  overload: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync*
  nameWithType.vb: IUsersClient.GetRefreshTokenForUserAndClientAsync(String, String, String, String, Nullable(Of Int32), String, CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync(System.String, System.String, System.String, System.String, System.Nullable(Of System.Int32), System.String, System.Threading.CancellationToken)
  name.vb: GetRefreshTokenForUserAndClientAsync(String, String, String, String, Nullable(Of Int32), String, CancellationToken)
- uid: Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ChangePasswordAsync(IChangePasswordRequest, String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ChangePasswordAsync(IChangePasswordRequest, String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest, System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ChangePasswordAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 173
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nChanges a user&apos;s password by validating the user&apos;s current password. This operation can only be performed on users in `STAGED`, `ACTIVE`, `PASSWORD_EXPIRED`, or `RECOVERY` status that have a valid password credential\n"
  example: []
  syntax:
    content: Task<IUserCredentials> ChangePasswordAsync(IChangePasswordRequest changePasswordRequest, string userId, bool? strict = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: changePasswordRequest
      type: Okta.Sdk.IChangePasswordRequest
      description: The <xref href="Okta.Sdk.IChangePasswordRequest" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: ''
    - id: strict
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
      description: The <xref href="Okta.Sdk.IUserCredentials" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ChangePasswordAsync(changePasswordRequest As IChangePasswordRequest, userId As String, strict As Boolean? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IUserCredentials)
  overload: Okta.Sdk.IUsersClient.ChangePasswordAsync*
  nameWithType.vb: IUsersClient.ChangePasswordAsync(IChangePasswordRequest, String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest, System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ChangePasswordAsync(IChangePasswordRequest, String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(Okta.Sdk.IUserCredentials,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(Okta.Sdk.IUserCredentials,System.String,System.Threading.CancellationToken)
  id: ChangeRecoveryQuestionAsync(Okta.Sdk.IUserCredentials,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ChangeRecoveryQuestionAsync(IUserCredentials, String, CancellationToken)
  nameWithType: IUsersClient.ChangeRecoveryQuestionAsync(IUserCredentials, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(Okta.Sdk.IUserCredentials, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ChangeRecoveryQuestionAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 182
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  syntax:
    content: Task<IUserCredentials> ChangeRecoveryQuestionAsync(IUserCredentials userCredentials, string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userCredentials
      type: Okta.Sdk.IUserCredentials
    - id: userId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
    content.vb: Function ChangeRecoveryQuestionAsync(userCredentials As IUserCredentials, userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUserCredentials)
  overload: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync*
- uid: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ForgotPasswordGenerateOneTimeTokenAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ForgotPasswordGenerateOneTimeTokenAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ForgotPasswordGenerateOneTimeTokenAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 191
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGenerates a one-time token (OTT) that can be used to reset a user&apos;s password\n"
  example: []
  syntax:
    content: Task<IForgotPasswordResponse> ForgotPasswordGenerateOneTimeTokenAsync(string userId, bool? sendEmail = true, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IForgotPasswordResponse}
      description: The <xref href="Okta.Sdk.IForgotPasswordResponse" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ForgotPasswordGenerateOneTimeTokenAsync(userId As String, sendEmail As Boolean? = True, cancellationToken As CancellationToken = Nothing) As Task(Of IForgotPasswordResponse)
  overload: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync*
  nameWithType.vb: IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ForgotPasswordGenerateOneTimeTokenAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ForgotPasswordSetNewPasswordAsync(IUserCredentials, String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ForgotPasswordSetNewPasswordAsync(IUserCredentials, String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials, System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ForgotPasswordSetNewPasswordAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 201
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSets a new password for a user by validating the user&apos;s answer to their current recovery question\n"
  example: []
  syntax:
    content: Task<IForgotPasswordResponse> ForgotPasswordSetNewPasswordAsync(IUserCredentials user, string userId, bool? sendEmail = true, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: user
      type: Okta.Sdk.IUserCredentials
      description: The <xref href="Okta.Sdk.IUserCredentials" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IForgotPasswordResponse}
      description: The <xref href="Okta.Sdk.IForgotPasswordResponse" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ForgotPasswordSetNewPasswordAsync(user As IUserCredentials, userId As String, sendEmail As Boolean? = True, cancellationToken As CancellationToken = Nothing) As Task(Of IForgotPasswordResponse)
  overload: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync*
  nameWithType.vb: IUsersClient.ForgotPasswordSetNewPasswordAsync(IUserCredentials, String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync(Okta.Sdk.IUserCredentials, System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ForgotPasswordSetNewPasswordAsync(IUserCredentials, String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.RevokeUserGrantsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RevokeUserGrantsAsync(System.String,System.Threading.CancellationToken)
  id: RevokeUserGrantsAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RevokeUserGrantsAsync(String, CancellationToken)
  nameWithType: IUsersClient.RevokeUserGrantsAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RevokeUserGrantsAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RevokeUserGrantsAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 209
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRevokes all grants for a specified user\n"
  example: []
  syntax:
    content: Task RevokeUserGrantsAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RevokeUserGrantsAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RevokeUserGrantsAsync*
- uid: Okta.Sdk.IUsersClient.ListUserGrants(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.ListUserGrants(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  id: ListUserGrants(System.String,System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUserGrants(String, String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.ListUserGrants(String, String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.ListUserGrants(System.String, System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserGrants
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 220
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all grants for the specified user\n"
  example: []
  syntax:
    content: ICollectionClient<IOAuth2ScopeConsentGrant> ListUserGrants(string userId, string scopeId = null, string expand = null, string after = null, int? limit = 20)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: scopeId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2ScopeConsentGrant}
      description: A collection of <xref href="Okta.Sdk.IOAuth2ScopeConsentGrant" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserGrants(userId As String, scopeId As String = Nothing, expand As String = Nothing, after As String = Nothing, limit As Integer? = 20) As ICollectionClient(Of IOAuth2ScopeConsentGrant)
  overload: Okta.Sdk.IUsersClient.ListUserGrants*
  nameWithType.vb: IUsersClient.ListUserGrants(String, String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.ListUserGrants(System.String, System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: ListUserGrants(String, String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.RevokeUserGrantAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RevokeUserGrantAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RevokeUserGrantAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RevokeUserGrantAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.RevokeUserGrantAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RevokeUserGrantAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RevokeUserGrantAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 229
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRevokes one grant for a specified user\n"
  example: []
  syntax:
    content: Task RevokeUserGrantAsync(string userId, string grantId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: grantId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RevokeUserGrantAsync(userId As String, grantId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RevokeUserGrantAsync*
- uid: Okta.Sdk.IUsersClient.GetUserGrantAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.GetUserGrantAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: GetUserGrantAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetUserGrantAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.GetUserGrantAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.GetUserGrantAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetUserGrantAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 239
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGets a grant for the specified user\n"
  example: []
  syntax:
    content: Task<IOAuth2ScopeConsentGrant> GetUserGrantAsync(string userId, string grantId, string expand = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: grantId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IOAuth2ScopeConsentGrant}
      description: The <xref href="Okta.Sdk.IOAuth2ScopeConsentGrant" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetUserGrantAsync(userId As String, grantId As String, expand As String = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IOAuth2ScopeConsentGrant)
  overload: Okta.Sdk.IUsersClient.GetUserGrantAsync*
- uid: Okta.Sdk.IUsersClient.ListUserGroups(System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListUserGroups(System.String)
  id: ListUserGroups(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUserGroups(String)
  nameWithType: IUsersClient.ListUserGroups(String)
  fullName: Okta.Sdk.IUsersClient.ListUserGroups(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserGroups
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 246
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nFetches the groups of which the user is a member.\n"
  example: []
  syntax:
    content: ICollectionClient<IGroup> ListUserGroups(string userId)
    parameters:
    - id: userId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IGroup}
      description: A collection of <xref href="Okta.Sdk.IGroup" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserGroups(userId As String) As ICollectionClient(Of IGroup)
  overload: Okta.Sdk.IUsersClient.ListUserGroups*
- uid: Okta.Sdk.IUsersClient.ListUserIdentityProviders(System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListUserIdentityProviders(System.String)
  id: ListUserIdentityProviders(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUserIdentityProviders(String)
  nameWithType: IUsersClient.ListUserIdentityProviders(String)
  fullName: Okta.Sdk.IUsersClient.ListUserIdentityProviders(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserIdentityProviders
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 253
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists the IdPs associated with the user.\n"
  example: []
  syntax:
    content: ICollectionClient<IIdentityProvider> ListUserIdentityProviders(string userId)
    parameters:
    - id: userId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IIdentityProvider}
      description: A collection of <xref href="Okta.Sdk.IIdentityProvider" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserIdentityProviders(userId As String) As ICollectionClient(Of IIdentityProvider)
  overload: Okta.Sdk.IUsersClient.ListUserIdentityProviders*
- uid: Okta.Sdk.IUsersClient.ActivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ActivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ActivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ActivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ActivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ActivateUserAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ActivateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 262
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nActivates a user.  This operation can only be performed on users with a `STAGED` status.  Activation of a user is an asynchronous operation. The user will have the `transitioningToStatus` property with a value of `ACTIVE` during activation to indicate that the user hasn&apos;t completed the asynchronous operation.  The user will have a status of `ACTIVE` when the activation process is complete.\n"
  example: []
  syntax:
    content: Task<IUserActivationToken> ActivateUserAsync(string userId, bool? sendEmail = true, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: Sends an activation email to the user if true
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserActivationToken}
      description: The <xref href="Okta.Sdk.IUserActivationToken" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ActivateUserAsync(userId As String, sendEmail As Boolean? = True, cancellationToken As CancellationToken = Nothing) As Task(Of IUserActivationToken)
  overload: Okta.Sdk.IUsersClient.ActivateUserAsync*
  nameWithType.vb: IUsersClient.ActivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ActivateUserAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ActivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.DeactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.DeactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: DeactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: DeactivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.DeactivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.DeactivateUserAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeactivateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 271
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDeactivates a user. This operation can only be performed on users that do not have a `DEPROVISIONED` status. While the asynchronous operation (triggered by HTTP header `Prefer: respond-async`) is proceeding the user&apos;s `transitioningToStatus` property is `DEPROVISIONED`. The user&apos;s status is `DEPROVISIONED` when the deactivation process is complete.\n"
  example: []
  syntax:
    content: Task DeactivateUserAsync(string userId, bool? sendEmail = false, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function DeactivateUserAsync(userId As String, sendEmail As Boolean? = False, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.DeactivateUserAsync*
  nameWithType.vb: IUsersClient.DeactivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.DeactivateUserAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: DeactivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ExpirePasswordAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ExpirePasswordAsync(System.String,System.Threading.CancellationToken)
  id: ExpirePasswordAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ExpirePasswordAsync(String, CancellationToken)
  nameWithType: IUsersClient.ExpirePasswordAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ExpirePasswordAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ExpirePasswordAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 279
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nThis operation transitions the user to the status of `PASSWORD_EXPIRED` so that the user is required to change their password at their next login.\n"
  example: []
  syntax:
    content: Task<IUser> ExpirePasswordAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ExpirePasswordAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.ExpirePasswordAsync*
- uid: Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync(System.String,System.Threading.CancellationToken)
  id: ExpirePasswordAndGetTemporaryPasswordAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ExpirePasswordAndGetTemporaryPasswordAsync(String, CancellationToken)
  nameWithType: IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ExpirePasswordAndGetTemporaryPasswordAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 287
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nThis operation transitions the user to the status of `PASSWORD_EXPIRED` and the user&apos;s password is reset to a temporary password that is returned.\n"
  example: []
  syntax:
    content: Task<ITempPassword> ExpirePasswordAndGetTemporaryPasswordAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.ITempPassword}
      description: The <xref href="Okta.Sdk.ITempPassword" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ExpirePasswordAndGetTemporaryPasswordAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of ITempPassword)
  overload: Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync*
- uid: Okta.Sdk.IUsersClient.ReactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ReactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ReactivateUserAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ReactivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ReactivateUserAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ReactivateUserAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ReactivateUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 296
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nReactivates a user.  This operation can only be performed on users with a `PROVISIONED` status.  This operation restarts the activation workflow if for some reason the user activation was not completed when using the activationToken from [Activate User](#activate-user).\n"
  example: []
  syntax:
    content: Task<IUserActivationToken> ReactivateUserAsync(string userId, bool? sendEmail = false, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: Sends an activation email to the user if true
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserActivationToken}
      description: The <xref href="Okta.Sdk.IUserActivationToken" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ReactivateUserAsync(userId As String, sendEmail As Boolean? = False, cancellationToken As CancellationToken = Nothing) As Task(Of IUserActivationToken)
  overload: Okta.Sdk.IUsersClient.ReactivateUserAsync*
  nameWithType.vb: IUsersClient.ReactivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ReactivateUserAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ReactivateUserAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ResetFactorsAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ResetFactorsAsync(System.String,System.Threading.CancellationToken)
  id: ResetFactorsAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ResetFactorsAsync(String, CancellationToken)
  nameWithType: IUsersClient.ResetFactorsAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ResetFactorsAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ResetFactorsAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 304
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nThis operation resets all factors for the specified user. All MFA factor enrollments returned to the unenrolled state. The user&apos;s status remains ACTIVE. This link is present only if the user is currently enrolled in one or more MFA factors.\n"
  example: []
  syntax:
    content: Task ResetFactorsAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function ResetFactorsAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.ResetFactorsAsync*
- uid: Okta.Sdk.IUsersClient.ResetPasswordAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ResetPasswordAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ResetPasswordAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ResetPasswordAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ResetPasswordAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ResetPasswordAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ResetPasswordAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 313
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGenerates a one-time token (OTT) that can be used to reset a user&apos;s password.  The OTT link can be automatically emailed to the user or returned to the API caller and distributed using a custom flow.\n"
  example: []
  syntax:
    content: Task<IResetPasswordToken> ResetPasswordAsync(string userId, bool? sendEmail, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: sendEmail
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IResetPasswordToken}
      description: The <xref href="Okta.Sdk.IResetPasswordToken" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ResetPasswordAsync(userId As String, sendEmail As Boolean?, cancellationToken As CancellationToken = Nothing) As Task(Of IResetPasswordToken)
  overload: Okta.Sdk.IUsersClient.ResetPasswordAsync*
  nameWithType.vb: IUsersClient.ResetPasswordAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ResetPasswordAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ResetPasswordAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.SuspendUserAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.SuspendUserAsync(System.String,System.Threading.CancellationToken)
  id: SuspendUserAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: SuspendUserAsync(String, CancellationToken)
  nameWithType: IUsersClient.SuspendUserAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.SuspendUserAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: SuspendUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 321
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSuspends a user.  This operation can only be performed on users with an `ACTIVE` status.  The user will have a status of `SUSPENDED` when the process is complete.\n"
  example: []
  syntax:
    content: Task SuspendUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function SuspendUserAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.SuspendUserAsync*
- uid: Okta.Sdk.IUsersClient.UnlockUserAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.UnlockUserAsync(System.String,System.Threading.CancellationToken)
  id: UnlockUserAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: UnlockUserAsync(String, CancellationToken)
  nameWithType: IUsersClient.UnlockUserAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.UnlockUserAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UnlockUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 329
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUnlocks a user with a `LOCKED_OUT` status and returns them to `ACTIVE` status.  Users will be able to login with their current password.\n"
  example: []
  syntax:
    content: Task UnlockUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function UnlockUserAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.UnlockUserAsync*
- uid: Okta.Sdk.IUsersClient.UnsuspendUserAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.UnsuspendUserAsync(System.String,System.Threading.CancellationToken)
  id: UnsuspendUserAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: UnsuspendUserAsync(String, CancellationToken)
  nameWithType: IUsersClient.UnsuspendUserAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.UnsuspendUserAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UnsuspendUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 337
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUnsuspends a user and returns them to the `ACTIVE` state.  This operation can only be performed on users that have a `SUSPENDED` status.\n"
  example: []
  syntax:
    content: Task UnsuspendUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function UnsuspendUserAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.UnsuspendUserAsync*
- uid: Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RemoveLinkedObjectForUserAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RemoveLinkedObjectForUserAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.RemoveLinkedObjectForUserAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RemoveLinkedObjectForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 346
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDelete linked objects for a user, relationshipName can be ONLY a primary relationship name\n"
  example: []
  syntax:
    content: Task RemoveLinkedObjectForUserAsync(string userId, string relationshipName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: relationshipName
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RemoveLinkedObjectForUserAsync(userId As String, relationshipName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync*
- uid: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.GetLinkedObjectsForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  id: GetLinkedObjectsForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetLinkedObjectsForUser(String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.GetLinkedObjectsForUser(String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser(System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetLinkedObjectsForUser
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 356
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGet linked objects for a user, relationshipName can be a primary or associated relationship name\n"
  example: []
  syntax:
    content: ICollectionClient<IResponseLinks> GetLinkedObjectsForUser(string userId, string relationshipName, string after = null, int? limit = -1)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: relationshipName
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IResponseLinks}
      description: A collection of <xref href="Okta.Sdk.IResponseLinks" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function GetLinkedObjectsForUser(userId As String, relationshipName As String, after As String = Nothing, limit As Integer? = -1) As ICollectionClient(Of IResponseLinks)
  overload: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser*
  nameWithType.vb: IUsersClient.GetLinkedObjectsForUser(String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser(System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: GetLinkedObjectsForUser(String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.ListAssignedRolesForUser(System.String,System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListAssignedRolesForUser(System.String,System.String)
  id: ListAssignedRolesForUser(System.String,System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListAssignedRolesForUser(String, String)
  nameWithType: IUsersClient.ListAssignedRolesForUser(String, String)
  fullName: Okta.Sdk.IUsersClient.ListAssignedRolesForUser(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListAssignedRolesForUser
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 364
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all roles assigned to a user.\n"
  example: []
  syntax:
    content: ICollectionClient<IRole> ListAssignedRolesForUser(string userId, string expand = null)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: expand
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IRole}
      description: A collection of <xref href="Okta.Sdk.IRole" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListAssignedRolesForUser(userId As String, expand As String = Nothing) As ICollectionClient(Of IRole)
  overload: Okta.Sdk.IUsersClient.ListAssignedRolesForUser*
- uid: Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AssignRoleToUserAsync(IAssignRoleRequest, String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.AssignRoleToUserAsync(IAssignRoleRequest, String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest, System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AssignRoleToUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 374
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nAssigns a role to a user.\n"
  example: []
  syntax:
    content: Task<IRole> AssignRoleToUserAsync(IAssignRoleRequest assignRoleRequest, string userId, bool? disableNotifications = null, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: assignRoleRequest
      type: Okta.Sdk.IAssignRoleRequest
      description: The <xref href="Okta.Sdk.IAssignRoleRequest" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: ''
    - id: disableNotifications
      type: System.Nullable{System.Boolean}
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IRole}
      description: The <xref href="Okta.Sdk.IRole" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function AssignRoleToUserAsync(assignRoleRequest As IAssignRoleRequest, userId As String, disableNotifications As Boolean? = Nothing, cancellationToken As CancellationToken = Nothing) As Task(Of IRole)
  overload: Okta.Sdk.IUsersClient.AssignRoleToUserAsync*
  nameWithType.vb: IUsersClient.AssignRoleToUserAsync(IAssignRoleRequest, String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest, System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: AssignRoleToUserAsync(IAssignRoleRequest, String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync(System.String,System.String,System.Threading.CancellationToken)
  id: RemoveRoleFromUserAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RemoveRoleFromUserAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.RemoveRoleFromUserAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RemoveRoleFromUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 383
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUnassigns a role from a user.\n"
  example: []
  syntax:
    content: Task RemoveRoleFromUserAsync(string userId, string roleId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RemoveRoleFromUserAsync(userId As String, roleId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync*
- uid: Okta.Sdk.IUsersClient.GetUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.GetUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetUserRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetUserRoleAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.GetUserRoleAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.GetUserRoleAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetUserRoleAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 392
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGets role that is assigne to user.\n"
  example: []
  syntax:
    content: Task<IRole> GetUserRoleAsync(string userId, string roleId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IRole}
      description: The <xref href="Okta.Sdk.IRole" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetUserRoleAsync(userId As String, roleId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IRole)
  overload: Okta.Sdk.IUsersClient.GetUserRoleAsync*
- uid: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  id: ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListApplicationTargetsForApplicationAdministratorRoleForUser(String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListApplicationTargetsForApplicationAdministratorRoleForUser
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 402
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nLists all App targets for an `APP_ADMIN` Role assigned to a User. This methods return list may include full Applications or Instances. The response for an instance will have an `ID` value, while Application will not have an ID.\n"
  example: []
  syntax:
    content: ICollectionClient<ICatalogApplication> ListApplicationTargetsForApplicationAdministratorRoleForUser(string userId, string roleId, string after = null, int? limit = 20)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.ICatalogApplication}
      description: A collection of <xref href="Okta.Sdk.ICatalogApplication" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListApplicationTargetsForApplicationAdministratorRoleForUser(userId As String, roleId As String, after As String = Nothing, limit As Integer? = 20) As ICollectionClient(Of ICatalogApplication)
  overload: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser*
  nameWithType.vb: IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser(System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: ListApplicationTargetsForApplicationAdministratorRoleForUser(String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  id: AddAllAppsAsTargetToRoleAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AddAllAppsAsTargetToRoleAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.AddAllAppsAsTargetToRoleAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AddAllAppsAsTargetToRoleAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 411
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSuccess\n"
  example: []
  syntax:
    content: Task AddAllAppsAsTargetToRoleAsync(string userId, string roleId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function AddAllAppsAsTargetToRoleAsync(userId As String, roleId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync*
- uid: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 421
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSuccess\n"
  example: []
  syntax:
    content: Task RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(string userId, string roleId, string appName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: appName
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync(userId As String, roleId As String, appName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync*
- uid: Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: AddApplicationTargetToAdminRoleForUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AddApplicationTargetToAdminRoleForUserAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.AddApplicationTargetToAdminRoleForUserAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AddApplicationTargetToAdminRoleForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 431
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nSuccess\n"
  example: []
  syntax:
    content: Task AddApplicationTargetToAdminRoleForUserAsync(string userId, string roleId, string appName, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: appName
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function AddApplicationTargetToAdminRoleForUserAsync(userId As String, roleId As String, appName As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync*
- uid: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveApplicationTargetFromAdministratorRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RemoveApplicationTargetFromAdministratorRoleForUserAsync(String, String, String, String, CancellationToken)
  nameWithType: IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync(String, String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync(System.String, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RemoveApplicationTargetFromAdministratorRoleForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 442
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRemove App Instance Target to App Administrator Role given to a User\n"
  example: []
  syntax:
    content: Task RemoveApplicationTargetFromAdministratorRoleForUserAsync(string userId, string roleId, string appName, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: appName
      type: System.String
      description: ''
    - id: applicationId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RemoveApplicationTargetFromAdministratorRoleForUserAsync(userId As String, roleId As String, appName As String, applicationId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync*
- uid: Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: AddApplicationTargetToAppAdminRoleForUserAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AddApplicationTargetToAppAdminRoleForUserAsync(String, String, String, String, CancellationToken)
  nameWithType: IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync(String, String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync(System.String, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AddApplicationTargetToAppAdminRoleForUserAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 453
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nAdd App Instance Target to App Administrator Role given to a User\n"
  example: []
  syntax:
    content: Task AddApplicationTargetToAppAdminRoleForUserAsync(string userId, string roleId, string appName, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: appName
      type: System.String
      description: ''
    - id: applicationId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function AddApplicationTargetToAppAdminRoleForUserAsync(userId As String, roleId As String, appName As String, applicationId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync*
- uid: Okta.Sdk.IUsersClient.ListGroupTargetsForRole(System.String,System.String,System.String,System.Nullable{System.Int32})
  commentId: M:Okta.Sdk.IUsersClient.ListGroupTargetsForRole(System.String,System.String,System.String,System.Nullable{System.Int32})
  id: ListGroupTargetsForRole(System.String,System.String,System.String,System.Nullable{System.Int32})
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListGroupTargetsForRole(String, String, String, Nullable<Int32>)
  nameWithType: IUsersClient.ListGroupTargetsForRole(String, String, String, Nullable<Int32>)
  fullName: Okta.Sdk.IUsersClient.ListGroupTargetsForRole(System.String, System.String, System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListGroupTargetsForRole
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 463
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nList all group targets given a role id.\n"
  example: []
  syntax:
    content: ICollectionClient<IGroup> ListGroupTargetsForRole(string userId, string roleId, string after = null, int? limit = 20)
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: after
      type: System.String
      description: ''
    - id: limit
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.IGroup}
      description: A collection of <xref href="Okta.Sdk.IGroup" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListGroupTargetsForRole(userId As String, roleId As String, after As String = Nothing, limit As Integer? = 20) As ICollectionClient(Of IGroup)
  overload: Okta.Sdk.IUsersClient.ListGroupTargetsForRole*
  nameWithType.vb: IUsersClient.ListGroupTargetsForRole(String, String, String, Nullable(Of Int32))
  fullName.vb: Okta.Sdk.IUsersClient.ListGroupTargetsForRole(System.String, System.String, System.String, System.Nullable(Of System.Int32))
  name.vb: ListGroupTargetsForRole(String, String, String, Nullable(Of Int32))
- uid: Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveGroupTargetFromRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: RemoveGroupTargetFromRoleAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.RemoveGroupTargetFromRoleAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RemoveGroupTargetFromRoleAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 473
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRemoves a group target from a role assigned to a user.\n"
  example: []
  syntax:
    content: Task RemoveGroupTargetFromRoleAsync(string userId, string roleId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: groupId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function RemoveGroupTargetFromRoleAsync(userId As String, roleId As String, groupId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync*
- uid: Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: AddGroupTargetToRoleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AddGroupTargetToRoleAsync(String, String, String, CancellationToken)
  nameWithType: IUsersClient.AddGroupTargetToRoleAsync(String, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AddGroupTargetToRoleAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 483
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nAdds a group target for a role assigned to a user.\n"
  example: []
  syntax:
    content: Task AddGroupTargetToRoleAsync(string userId, string roleId, string groupId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: roleId
      type: System.String
      description: ''
    - id: groupId
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function AddGroupTargetToRoleAsync(userId As String, roleId As String, groupId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync*
- uid: Okta.Sdk.IUsersClient.ClearUserSessionsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ClearUserSessionsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  id: ClearUserSessionsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ClearUserSessionsAsync(String, Nullable<Boolean>, CancellationToken)
  nameWithType: IUsersClient.ClearUserSessionsAsync(String, Nullable<Boolean>, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ClearUserSessionsAsync(System.String, System.Nullable<System.Boolean>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ClearUserSessionsAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 492
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nRemoves all active identity provider sessions. This forces the user to authenticate on the next operation. Optionally revokes OpenID Connect and OAuth refresh and access tokens issued to the user.\n"
  example: []
  syntax:
    content: Task ClearUserSessionsAsync(string userId, bool? oauthTokens = false, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: oauthTokens
      type: System.Nullable{System.Boolean}
      description: Revoke issued OpenID Connect and OAuth refresh and access tokens
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function ClearUserSessionsAsync(userId As String, oauthTokens As Boolean? = False, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.ClearUserSessionsAsync*
  nameWithType.vb: IUsersClient.ClearUserSessionsAsync(String, Nullable(Of Boolean), CancellationToken)
  fullName.vb: Okta.Sdk.IUsersClient.ClearUserSessionsAsync(System.String, System.Nullable(Of System.Boolean), System.Threading.CancellationToken)
  name.vb: ClearUserSessionsAsync(String, Nullable(Of Boolean), CancellationToken)
- uid: Okta.Sdk.IUsersClient.ListUserSubscriptions(System.String)
  commentId: M:Okta.Sdk.IUsersClient.ListUserSubscriptions(System.String)
  id: ListUserSubscriptions(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ListUserSubscriptions(String)
  nameWithType: IUsersClient.ListUserSubscriptions(String)
  fullName: Okta.Sdk.IUsersClient.ListUserSubscriptions(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ListUserSubscriptions
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 499
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nList subscriptions of a User. Only lists subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.\n"
  example: []
  syntax:
    content: ICollectionClient<ISubscription> ListUserSubscriptions(string userId)
    parameters:
    - id: userId
      type: System.String
      description: ''
    return:
      type: Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
      description: A collection of <xref href="Okta.Sdk.ISubscription" data-throw-if-not-resolved="false"></xref> that can be enumerated asynchronously.
    content.vb: Function ListUserSubscriptions(userId As String) As ICollectionClient(Of ISubscription)
  overload: Okta.Sdk.IUsersClient.ListUserSubscriptions*
- uid: Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  id: GetUserSubscriptionByNotificationTypeAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: GetUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  nameWithType: IUsersClient.GetUserSubscriptionByNotificationTypeAsync(String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Generated/IUsersClient.Generated.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetUserSubscriptionByNotificationTypeAsync
    path: ../src/Okta.Sdk/Generated/IUsersClient.Generated.cs
    startLine: 508
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nGet the subscriptions of a User with a specific notification type. Only gets subscriptions for current user. An AccessDeniedException message is sent if requests are made from other users.\n"
  example: []
  syntax:
    content: Task<ISubscription> GetUserSubscriptionByNotificationTypeAsync(string userId, string notificationType, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: ''
    - id: notificationType
      type: System.String
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
      description: The <xref href="Okta.Sdk.ISubscription" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function GetUserSubscriptionByNotificationTypeAsync(userId As String, notificationType As String, cancellationToken As CancellationToken = Nothing) As Task(Of ISubscription)
  overload: Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithoutCredentialsOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithoutCredentialsOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithoutCredentialsOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithoutCredentialsOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithoutCredentialsOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithoutCredentialsOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 22
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization without a password or a recovery question/answer.\n"
  remarks: See <a href="https://developer.okta.com/docs/api/resources/users.html#create-user-without-credentials">Create User without Credentials</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithoutCredentialsOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithoutCredentialsOptions
      description: The options for this Create User (without credentials) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithoutCredentialsOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithImportedHashedPasswordOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithImportedHashedPasswordOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithImportedHashedPasswordOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithImportedHashedPasswordOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithImportedHashedPasswordOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithImportedHashedPasswordOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 31
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization with the specified hashed password.\n"
  remarks: See <a href="https://developer.okta.com/docs/reference/api/users/#create-user-with-imported-hashed-password">Create User with Imported Hashed Password</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithImportedHashedPasswordOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithImportedHashedPasswordOptions
      description: The options for this Create User (with a specified hashed password) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithImportedHashedPasswordOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithPasswordImportInlineHookOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithPasswordImportInlineHookOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 40
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization specifying that a Password Inline Hook should be used to handle password verification..\n"
  remarks: See <a href="https://developer.okta.com/docs/reference/api/users/#create-user-with-password-import-inline-hook">Create User with Password Import Inline Hook</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithPasswordImportInlineHookOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions
      description: The options for this Create User (with password import inline hook) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithPasswordImportInlineHookOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithRecoveryQuestionOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithRecoveryQuestionOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithRecoveryQuestionOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithRecoveryQuestionOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithRecoveryQuestionOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithRecoveryQuestionOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 49
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization with a recovery question/answer (but no password).\n"
  remarks: See <a href="https://developer.okta.com/docs/api/resources/users.html#create-user-with-recovery-question">Create User with Recovery Question</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithRecoveryQuestionOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithRecoveryQuestionOptions
      description: The options for this Create User (with recovery question) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithRecoveryQuestionOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithPasswordOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithPasswordOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithPasswordOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithPasswordOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 58
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization with the specified password.\n"
  remarks: See <a href="https://developer.okta.com/docs/api/resources/users.html#create-user-with-password">Create User with Password</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithPasswordOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithPasswordOptions
      description: The options for this Create User (with password) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithPasswordOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithProviderOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithProviderOptions,System.Threading.CancellationToken)
  id: CreateUserAsync(Okta.Sdk.CreateUserWithProviderOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: CreateUserAsync(CreateUserWithProviderOptions, CancellationToken)
  nameWithType: IUsersClient.CreateUserAsync(CreateUserWithProviderOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync(Okta.Sdk.CreateUserWithProviderOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CreateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 67
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nCreates a new user in your Okta organization with the specified authentication provider.\n"
  remarks: See <a href="https://developer.okta.com/docs/api/resources/users.html#create-user-with-authentication-provider">Create User with Authentication Provider</a> in the documentation.
  example: []
  syntax:
    content: Task<IUser> CreateUserAsync(CreateUserWithProviderOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: options
      type: Okta.Sdk.CreateUserWithProviderOptions
      description: The options for this Create User (with authentication provider) request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The created user.
    content.vb: Function CreateUserAsync(options As CreateUserWithProviderOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.CreateUserAsync*
- uid: Okta.Sdk.IUsersClient.ChangePasswordAsync(System.String,Okta.Sdk.ChangePasswordOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ChangePasswordAsync(System.String,Okta.Sdk.ChangePasswordOptions,System.Threading.CancellationToken)
  id: ChangePasswordAsync(System.String,Okta.Sdk.ChangePasswordOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ChangePasswordAsync(String, ChangePasswordOptions, CancellationToken)
  nameWithType: IUsersClient.ChangePasswordAsync(String, ChangePasswordOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ChangePasswordAsync(System.String, Okta.Sdk.ChangePasswordOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ChangePasswordAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 78
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nChanges a user&apos;s password.\n"
  example: []
  syntax:
    content: Task<IUserCredentials> ChangePasswordAsync(string userId, ChangePasswordOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: The user ID.
    - id: options
      type: Okta.Sdk.ChangePasswordOptions
      description: The options for this Change Password request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
      description: The <xref href="Okta.Sdk.UserCredentials" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ChangePasswordAsync(userId As String, options As ChangePasswordOptions, cancellationToken As CancellationToken = Nothing) As Task(Of IUserCredentials)
  overload: Okta.Sdk.IUsersClient.ChangePasswordAsync*
- uid: Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Threading.CancellationToken)
  id: ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ChangePasswordAsync(IChangePasswordRequest, String, CancellationToken)
  nameWithType: IUsersClient.ChangePasswordAsync(IChangePasswordRequest, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ChangePasswordAsync(Okta.Sdk.IChangePasswordRequest, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ChangePasswordAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 88
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nChanges a user&apos;s password by validating the user&apos;s current password.  This operation can only be performed on users in `STAGED`, `ACTIVE`, `PASSWORD_EXPIRED`, or `RECOVERY` status that have a valid [password credential](#password-object)\n"
  remarks: Explicit overload to support backward compatibility.
  example: []
  syntax:
    content: Task<IUserCredentials> ChangePasswordAsync(IChangePasswordRequest changePasswordRequest, string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: changePasswordRequest
      type: Okta.Sdk.IChangePasswordRequest
      description: The <xref href="Okta.Sdk.IChangePasswordRequest" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: The user ID.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
      description: The <xref href="Okta.Sdk.IUserCredentials" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ChangePasswordAsync(changePasswordRequest As IChangePasswordRequest, userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUserCredentials)
  overload: Okta.Sdk.IUsersClient.ChangePasswordAsync*
- uid: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(System.String,Okta.Sdk.ChangeRecoveryQuestionOptions,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(System.String,Okta.Sdk.ChangeRecoveryQuestionOptions,System.Threading.CancellationToken)
  id: ChangeRecoveryQuestionAsync(System.String,Okta.Sdk.ChangeRecoveryQuestionOptions,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: ChangeRecoveryQuestionAsync(String, ChangeRecoveryQuestionOptions, CancellationToken)
  nameWithType: IUsersClient.ChangeRecoveryQuestionAsync(String, ChangeRecoveryQuestionOptions, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync(System.String, Okta.Sdk.ChangeRecoveryQuestionOptions, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ChangeRecoveryQuestionAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 97
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nChanges a user&apos;s recovery question.\n"
  example: []
  syntax:
    content: Task ChangeRecoveryQuestionAsync(string userId, ChangeRecoveryQuestionOptions options, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: The user ID.
    - id: options
      type: Okta.Sdk.ChangeRecoveryQuestionOptions
      description: The options for this Change Recovery Question request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="Okta.Sdk.IUserCredentials" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function ChangeRecoveryQuestionAsync(userId As String, options As ChangeRecoveryQuestionOptions, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync*
- uid: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String,System.Threading.CancellationToken)
  id: DeactivateOrDeleteUserAsync(System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: DeactivateOrDeleteUserAsync(String, CancellationToken)
  nameWithType: IUsersClient.DeactivateOrDeleteUserAsync(String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeactivateOrDeleteUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 106
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDeletes a user permanently. This operation can only be performed on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**\n"
  remarks: Explicit overload to support backward compatibility.
  example: []
  syntax:
    content: Task DeactivateOrDeleteUserAsync(string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: userId
      type: System.String
      description: The User ID
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function DeactivateOrDeleteUserAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task
  overload: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync*
- uid: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String)
  commentId: M:Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String)
  id: DeactivateOrDeleteUserAsync(System.String)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: DeactivateOrDeleteUserAsync(String)
  nameWithType: IUsersClient.DeactivateOrDeleteUserAsync(String)
  fullName: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeactivateOrDeleteUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 114
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nDeletes a user permanently. This operation can only be performed on users that have a `DEPROVISIONED` status.  **This action cannot be recovered!**\n"
  remarks: Explicit overload to support backward compatibility.
  example: []
  syntax:
    content: Task DeactivateOrDeleteUserAsync(string userId)
    parameters:
    - id: userId
      type: System.String
      description: The User ID
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation.
    content.vb: Function DeactivateOrDeleteUserAsync(userId As String) As Task
  overload: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync*
- uid: Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Threading.CancellationToken)
  id: UpdateUserAsync(Okta.Sdk.IUser,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: UpdateUserAsync(IUser, String, CancellationToken)
  nameWithType: IUsersClient.UpdateUserAsync(IUser, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.UpdateUserAsync(Okta.Sdk.IUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: UpdateUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 124
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nUpdate a user&apos;s profile and/or credentials using strict-update semantics.\n"
  remarks: Explicit overload to support backward compatibility.
  example: []
  syntax:
    content: Task<IUser> UpdateUserAsync(IUser user, string userId, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: user
      type: Okta.Sdk.IUser
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: The user ID.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IUser}
      description: The <xref href="Okta.Sdk.IUser" data-throw-if-not-resolved="false"></xref> response.
    content.vb: Function UpdateUserAsync(user As IUser, userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of IUser)
  overload: Okta.Sdk.IUsersClient.UpdateUserAsync*
- uid: Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.String,System.Threading.CancellationToken)
  id: AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest,System.String,System.String,System.Threading.CancellationToken)
  parent: Okta.Sdk.IUsersClient
  langs:
  - csharp
  - vb
  name: AssignRoleToUserAsync(IAssignRoleRequest, String, String, CancellationToken)
  nameWithType: IUsersClient.AssignRoleToUserAsync(IAssignRoleRequest, String, String, CancellationToken)
  fullName: Okta.Sdk.IUsersClient.AssignRoleToUserAsync(Okta.Sdk.IAssignRoleRequest, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/IUsersClient.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: AssignRoleToUserAsync
    path: ../src/Okta.Sdk/IUsersClient.cs
    startLine: 134
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk
  summary: "\nAssigns a role to a user.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This method is deprecated and will be removed in the next major release. Use <c>AssignRoleToUserAsync</c> but passing a bool? param for <c>disableNotifications</c> instead.")]

      Task<IRole> AssignRoleToUserAsync(IAssignRoleRequest assignRoleRequest, string userId, string disableNotifications, CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: assignRoleRequest
      type: Okta.Sdk.IAssignRoleRequest
      description: The <xref href="Okta.Sdk.IAssignRoleRequest" data-throw-if-not-resolved="false"></xref> resource.
    - id: userId
      type: System.String
      description: the user Id.
    - id: disableNotifications
      type: System.String
      description: The flag to disable notifications.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.IRole}
      description: The <xref href="Okta.Sdk.IRole" data-throw-if-not-resolved="false"></xref> response.
    content.vb: >-
      <Obsolete("This method is deprecated and will be removed in the next major release. Use <c>AssignRoleToUserAsync</c> but passing a bool? param for <c>disableNotifications</c> instead.")>

      Function AssignRoleToUserAsync(assignRoleRequest As IAssignRoleRequest, userId As String, disableNotifications As String, cancellationToken As CancellationToken = Nothing) As Task(Of IRole)
  overload: Okta.Sdk.IUsersClient.AssignRoleToUserAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This method is deprecated and will be removed in the next major release. Use <c>AssignRoleToUserAsync</c> but passing a bool? param for <c>disableNotifications</c> instead.
references:
- uid: Okta.Sdk
  commentId: N:Okta.Sdk
  name: Okta.Sdk
  nameWithType: Okta.Sdk
  fullName: Okta.Sdk
- uid: System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}.GetAsyncEnumerator(System.Threading.CancellationToken)
  commentId: M:System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}.GetAsyncEnumerator(System.Threading.CancellationToken)
  parent: System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}
  definition: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
  name: GetAsyncEnumerator(CancellationToken)
  nameWithType: IAsyncEnumerable<IUser>.GetAsyncEnumerator(CancellationToken)
  fullName: System.Collections.Generic.IAsyncEnumerable<Okta.Sdk.IUser>.GetAsyncEnumerator(System.Threading.CancellationToken)
  nameWithType.vb: IAsyncEnumerable(Of IUser).GetAsyncEnumerator(CancellationToken)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of Okta.Sdk.IUser).GetAsyncEnumerator(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<IUser>.GetAsyncEnumerator
    fullName: System.Collections.Generic.IAsyncEnumerable<Okta.Sdk.IUser>.GetAsyncEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of IUser).GetAsyncEnumerator
    fullName: System.Collections.Generic.IAsyncEnumerable(Of Okta.Sdk.IUser).GetAsyncEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
  commentId: M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
  isExternal: true
  name: GetAsyncEnumerator(CancellationToken)
  nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken)
  fullName: System.Collections.Generic.IAsyncEnumerable<T>.GetAsyncEnumerator(System.Threading.CancellationToken)
  nameWithType.vb: IAsyncEnumerable(Of T).GetAsyncEnumerator(CancellationToken)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T).GetAsyncEnumerator(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator
    fullName: System.Collections.Generic.IAsyncEnumerable<T>.GetAsyncEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of T).GetAsyncEnumerator
    fullName: System.Collections.Generic.IAsyncEnumerable(Of T).GetAsyncEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{Okta.Sdk.IUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IUser>
  nameWithType: IAsyncEnumerable<IUser>
  fullName: System.Collections.Generic.IAsyncEnumerable<Okta.Sdk.IUser>
  nameWithType.vb: IAsyncEnumerable(Of IUser)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of Okta.Sdk.IUser)
  name.vb: IAsyncEnumerable(Of IUser)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Okta.Sdk.IUser
  commentId: T:Okta.Sdk.IUser
  parent: Okta.Sdk
  name: IUser
  nameWithType: IUser
  fullName: Okta.Sdk.IUser
- uid: Okta.Sdk.IUsersClient.ListUsers*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUsers
  name: ListUsers
  nameWithType: IUsersClient.ListUsers
  fullName: Okta.Sdk.IUsersClient.ListUsers
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IUser}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IUser}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IUser>
  nameWithType: ICollectionClient<IUser>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IUser>
  nameWithType.vb: ICollectionClient(Of IUser)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IUser)
  name.vb: ICollectionClient(Of IUser)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.ICollectionClient`1
  commentId: T:Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<T>
  nameWithType: ICollectionClient<T>
  fullName: Okta.Sdk.ICollectionClient<T>
  nameWithType.vb: ICollectionClient(Of T)
  fullName.vb: Okta.Sdk.ICollectionClient(Of T)
  name.vb: ICollectionClient(Of T)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.ICreateUserRequest
  commentId: T:Okta.Sdk.ICreateUserRequest
  parent: Okta.Sdk
  name: ICreateUserRequest
  nameWithType: ICreateUserRequest
  fullName: Okta.Sdk.ICreateUserRequest
- uid: Okta.Sdk.IUsersClient.CreateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.CreateUserAsync
  name: CreateUserAsync
  nameWithType: IUsersClient.CreateUserAsync
  fullName: Okta.Sdk.IUsersClient.CreateUserAsync
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.UserNextLogin
  commentId: T:Okta.Sdk.UserNextLogin
  parent: Okta.Sdk
  name: UserNextLogin
  nameWithType: UserNextLogin
  fullName: Okta.Sdk.UserNextLogin
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Okta.Sdk.IUser}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUser>
  nameWithType: Task<IUser>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IUser>
  nameWithType.vb: Task(Of IUser)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IUser)
  name.vb: Task(Of IUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUser
    name: IUser
    nameWithType: IUser
    fullName: Okta.Sdk.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync
  name: SetLinkedObjectForUserAsync
  nameWithType: IUsersClient.SetLinkedObjectForUserAsync
  fullName: Okta.Sdk.IUsersClient.SetLinkedObjectForUserAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync
  name: DeactivateOrDeleteUserAsync
  nameWithType: IUsersClient.DeactivateOrDeleteUserAsync
  fullName: Okta.Sdk.IUsersClient.DeactivateOrDeleteUserAsync
- uid: Okta.Sdk.IUsersClient.GetUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.GetUserAsync
  name: GetUserAsync
  nameWithType: IUsersClient.GetUserAsync
  fullName: Okta.Sdk.IUsersClient.GetUserAsync
- uid: Okta.Sdk.IUsersClient.PartialUpdateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.PartialUpdateUserAsync
  name: PartialUpdateUserAsync
  nameWithType: IUsersClient.PartialUpdateUserAsync
  fullName: Okta.Sdk.IUsersClient.PartialUpdateUserAsync
- uid: Okta.Sdk.IUsersClient.UpdateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.UpdateUserAsync
  name: UpdateUserAsync
  nameWithType: IUsersClient.UpdateUserAsync
  fullName: Okta.Sdk.IUsersClient.UpdateUserAsync
- uid: Okta.Sdk.IAppLink
  commentId: T:Okta.Sdk.IAppLink
  parent: Okta.Sdk
  name: IAppLink
  nameWithType: IAppLink
  fullName: Okta.Sdk.IAppLink
- uid: Okta.Sdk.IUsersClient.ListAppLinks*
  commentId: Overload:Okta.Sdk.IUsersClient.ListAppLinks
  name: ListAppLinks
  nameWithType: IUsersClient.ListAppLinks
  fullName: Okta.Sdk.IUsersClient.ListAppLinks
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IAppLink}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IAppLink}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IAppLink>
  nameWithType: ICollectionClient<IAppLink>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IAppLink>
  nameWithType.vb: ICollectionClient(Of IAppLink)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IAppLink)
  name.vb: ICollectionClient(Of IAppLink)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IAppLink
    name: IAppLink
    nameWithType: IAppLink
    fullName: Okta.Sdk.IAppLink
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IAppLink
    name: IAppLink
    nameWithType: IAppLink
    fullName: Okta.Sdk.IAppLink
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IOAuth2Client
  commentId: T:Okta.Sdk.IOAuth2Client
  parent: Okta.Sdk
  name: IOAuth2Client
  nameWithType: IOAuth2Client
  fullName: Okta.Sdk.IOAuth2Client
- uid: Okta.Sdk.IUsersClient.ListUserClients*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUserClients
  name: ListUserClients
  nameWithType: IUsersClient.ListUserClients
  fullName: Okta.Sdk.IUsersClient.ListUserClients
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2Client}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2Client}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IOAuth2Client>
  nameWithType: ICollectionClient<IOAuth2Client>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IOAuth2Client>
  nameWithType.vb: ICollectionClient(Of IOAuth2Client)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IOAuth2Client)
  name.vb: ICollectionClient(Of IOAuth2Client)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IOAuth2Client
    name: IOAuth2Client
    nameWithType: IOAuth2Client
    fullName: Okta.Sdk.IOAuth2Client
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IOAuth2Client
    name: IOAuth2Client
    nameWithType: IOAuth2Client
    fullName: Okta.Sdk.IOAuth2Client
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync
  name: RevokeGrantsForUserAndClientAsync
  nameWithType: IUsersClient.RevokeGrantsForUserAndClientAsync
  fullName: Okta.Sdk.IUsersClient.RevokeGrantsForUserAndClientAsync
- uid: Okta.Sdk.IOAuth2ScopeConsentGrant
  commentId: T:Okta.Sdk.IOAuth2ScopeConsentGrant
  parent: Okta.Sdk
  name: IOAuth2ScopeConsentGrant
  nameWithType: IOAuth2ScopeConsentGrant
  fullName: Okta.Sdk.IOAuth2ScopeConsentGrant
- uid: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient*
  commentId: Overload:Okta.Sdk.IUsersClient.ListGrantsForUserAndClient
  name: ListGrantsForUserAndClient
  nameWithType: IUsersClient.ListGrantsForUserAndClient
  fullName: Okta.Sdk.IUsersClient.ListGrantsForUserAndClient
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2ScopeConsentGrant}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2ScopeConsentGrant}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IOAuth2ScopeConsentGrant>
  nameWithType: ICollectionClient<IOAuth2ScopeConsentGrant>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IOAuth2ScopeConsentGrant>
  nameWithType.vb: ICollectionClient(Of IOAuth2ScopeConsentGrant)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IOAuth2ScopeConsentGrant)
  name.vb: ICollectionClient(Of IOAuth2ScopeConsentGrant)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IOAuth2ScopeConsentGrant
    name: IOAuth2ScopeConsentGrant
    nameWithType: IOAuth2ScopeConsentGrant
    fullName: Okta.Sdk.IOAuth2ScopeConsentGrant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IOAuth2ScopeConsentGrant
    name: IOAuth2ScopeConsentGrant
    nameWithType: IOAuth2ScopeConsentGrant
    fullName: Okta.Sdk.IOAuth2ScopeConsentGrant
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync
  name: RevokeTokensForUserAndClientAsync
  nameWithType: IUsersClient.RevokeTokensForUserAndClientAsync
  fullName: Okta.Sdk.IUsersClient.RevokeTokensForUserAndClientAsync
- uid: Okta.Sdk.IOAuth2RefreshToken
  commentId: T:Okta.Sdk.IOAuth2RefreshToken
  parent: Okta.Sdk
  name: IOAuth2RefreshToken
  nameWithType: IOAuth2RefreshToken
  fullName: Okta.Sdk.IOAuth2RefreshToken
- uid: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient*
  commentId: Overload:Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient
  name: ListRefreshTokensForUserAndClient
  nameWithType: IUsersClient.ListRefreshTokensForUserAndClient
  fullName: Okta.Sdk.IUsersClient.ListRefreshTokensForUserAndClient
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2RefreshToken}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IOAuth2RefreshToken}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IOAuth2RefreshToken>
  nameWithType: ICollectionClient<IOAuth2RefreshToken>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IOAuth2RefreshToken>
  nameWithType.vb: ICollectionClient(Of IOAuth2RefreshToken)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IOAuth2RefreshToken)
  name.vb: ICollectionClient(Of IOAuth2RefreshToken)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IOAuth2RefreshToken
    name: IOAuth2RefreshToken
    nameWithType: IOAuth2RefreshToken
    fullName: Okta.Sdk.IOAuth2RefreshToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IOAuth2RefreshToken
    name: IOAuth2RefreshToken
    nameWithType: IOAuth2RefreshToken
    fullName: Okta.Sdk.IOAuth2RefreshToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync
  name: RevokeTokenForUserAndClientAsync
  nameWithType: IUsersClient.RevokeTokenForUserAndClientAsync
  fullName: Okta.Sdk.IUsersClient.RevokeTokenForUserAndClientAsync
- uid: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync
  name: GetRefreshTokenForUserAndClientAsync
  nameWithType: IUsersClient.GetRefreshTokenForUserAndClientAsync
  fullName: Okta.Sdk.IUsersClient.GetRefreshTokenForUserAndClientAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IOAuth2RefreshToken}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IOAuth2RefreshToken}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IOAuth2RefreshToken>
  nameWithType: Task<IOAuth2RefreshToken>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IOAuth2RefreshToken>
  nameWithType.vb: Task(Of IOAuth2RefreshToken)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IOAuth2RefreshToken)
  name.vb: Task(Of IOAuth2RefreshToken)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IOAuth2RefreshToken
    name: IOAuth2RefreshToken
    nameWithType: IOAuth2RefreshToken
    fullName: Okta.Sdk.IOAuth2RefreshToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IOAuth2RefreshToken
    name: IOAuth2RefreshToken
    nameWithType: IOAuth2RefreshToken
    fullName: Okta.Sdk.IOAuth2RefreshToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IChangePasswordRequest
  commentId: T:Okta.Sdk.IChangePasswordRequest
  parent: Okta.Sdk
  name: IChangePasswordRequest
  nameWithType: IChangePasswordRequest
  fullName: Okta.Sdk.IChangePasswordRequest
- uid: Okta.Sdk.IUserCredentials
  commentId: T:Okta.Sdk.IUserCredentials
  parent: Okta.Sdk
  name: IUserCredentials
  nameWithType: IUserCredentials
  fullName: Okta.Sdk.IUserCredentials
- uid: Okta.Sdk.IUsersClient.ChangePasswordAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ChangePasswordAsync
  name: ChangePasswordAsync
  nameWithType: IUsersClient.ChangePasswordAsync
  fullName: Okta.Sdk.IUsersClient.ChangePasswordAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IUserCredentials}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserCredentials>
  nameWithType: Task<IUserCredentials>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IUserCredentials>
  nameWithType.vb: Task(Of IUserCredentials)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IUserCredentials)
  name.vb: Task(Of IUserCredentials)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUserCredentials
    name: IUserCredentials
    nameWithType: IUserCredentials
    fullName: Okta.Sdk.IUserCredentials
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUserCredentials
    name: IUserCredentials
    nameWithType: IUserCredentials
    fullName: Okta.Sdk.IUserCredentials
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync
  name: ChangeRecoveryQuestionAsync
  nameWithType: IUsersClient.ChangeRecoveryQuestionAsync
  fullName: Okta.Sdk.IUsersClient.ChangeRecoveryQuestionAsync
- uid: Okta.Sdk.IForgotPasswordResponse
  commentId: T:Okta.Sdk.IForgotPasswordResponse
  parent: Okta.Sdk
  name: IForgotPasswordResponse
  nameWithType: IForgotPasswordResponse
  fullName: Okta.Sdk.IForgotPasswordResponse
- uid: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync
  name: ForgotPasswordGenerateOneTimeTokenAsync
  nameWithType: IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync
  fullName: Okta.Sdk.IUsersClient.ForgotPasswordGenerateOneTimeTokenAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IForgotPasswordResponse}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IForgotPasswordResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IForgotPasswordResponse>
  nameWithType: Task<IForgotPasswordResponse>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IForgotPasswordResponse>
  nameWithType.vb: Task(Of IForgotPasswordResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IForgotPasswordResponse)
  name.vb: Task(Of IForgotPasswordResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IForgotPasswordResponse
    name: IForgotPasswordResponse
    nameWithType: IForgotPasswordResponse
    fullName: Okta.Sdk.IForgotPasswordResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IForgotPasswordResponse
    name: IForgotPasswordResponse
    nameWithType: IForgotPasswordResponse
    fullName: Okta.Sdk.IForgotPasswordResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync
  name: ForgotPasswordSetNewPasswordAsync
  nameWithType: IUsersClient.ForgotPasswordSetNewPasswordAsync
  fullName: Okta.Sdk.IUsersClient.ForgotPasswordSetNewPasswordAsync
- uid: Okta.Sdk.IUsersClient.RevokeUserGrantsAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RevokeUserGrantsAsync
  name: RevokeUserGrantsAsync
  nameWithType: IUsersClient.RevokeUserGrantsAsync
  fullName: Okta.Sdk.IUsersClient.RevokeUserGrantsAsync
- uid: Okta.Sdk.IUsersClient.ListUserGrants*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUserGrants
  name: ListUserGrants
  nameWithType: IUsersClient.ListUserGrants
  fullName: Okta.Sdk.IUsersClient.ListUserGrants
- uid: Okta.Sdk.IUsersClient.RevokeUserGrantAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RevokeUserGrantAsync
  name: RevokeUserGrantAsync
  nameWithType: IUsersClient.RevokeUserGrantAsync
  fullName: Okta.Sdk.IUsersClient.RevokeUserGrantAsync
- uid: Okta.Sdk.IUsersClient.GetUserGrantAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.GetUserGrantAsync
  name: GetUserGrantAsync
  nameWithType: IUsersClient.GetUserGrantAsync
  fullName: Okta.Sdk.IUsersClient.GetUserGrantAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IOAuth2ScopeConsentGrant}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IOAuth2ScopeConsentGrant}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IOAuth2ScopeConsentGrant>
  nameWithType: Task<IOAuth2ScopeConsentGrant>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IOAuth2ScopeConsentGrant>
  nameWithType.vb: Task(Of IOAuth2ScopeConsentGrant)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IOAuth2ScopeConsentGrant)
  name.vb: Task(Of IOAuth2ScopeConsentGrant)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IOAuth2ScopeConsentGrant
    name: IOAuth2ScopeConsentGrant
    nameWithType: IOAuth2ScopeConsentGrant
    fullName: Okta.Sdk.IOAuth2ScopeConsentGrant
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IOAuth2ScopeConsentGrant
    name: IOAuth2ScopeConsentGrant
    nameWithType: IOAuth2ScopeConsentGrant
    fullName: Okta.Sdk.IOAuth2ScopeConsentGrant
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IGroup
  commentId: T:Okta.Sdk.IGroup
  parent: Okta.Sdk
  name: IGroup
  nameWithType: IGroup
  fullName: Okta.Sdk.IGroup
- uid: Okta.Sdk.IUsersClient.ListUserGroups*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUserGroups
  name: ListUserGroups
  nameWithType: IUsersClient.ListUserGroups
  fullName: Okta.Sdk.IUsersClient.ListUserGroups
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IGroup}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IGroup}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IGroup>
  nameWithType: ICollectionClient<IGroup>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IGroup>
  nameWithType.vb: ICollectionClient(Of IGroup)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IGroup)
  name.vb: ICollectionClient(Of IGroup)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IGroup
    name: IGroup
    nameWithType: IGroup
    fullName: Okta.Sdk.IGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IGroup
    name: IGroup
    nameWithType: IGroup
    fullName: Okta.Sdk.IGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IIdentityProvider
  commentId: T:Okta.Sdk.IIdentityProvider
  parent: Okta.Sdk
  name: IIdentityProvider
  nameWithType: IIdentityProvider
  fullName: Okta.Sdk.IIdentityProvider
- uid: Okta.Sdk.IUsersClient.ListUserIdentityProviders*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUserIdentityProviders
  name: ListUserIdentityProviders
  nameWithType: IUsersClient.ListUserIdentityProviders
  fullName: Okta.Sdk.IUsersClient.ListUserIdentityProviders
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IIdentityProvider}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IIdentityProvider}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IIdentityProvider>
  nameWithType: ICollectionClient<IIdentityProvider>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IIdentityProvider>
  nameWithType.vb: ICollectionClient(Of IIdentityProvider)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IIdentityProvider)
  name.vb: ICollectionClient(Of IIdentityProvider)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IIdentityProvider
    name: IIdentityProvider
    nameWithType: IIdentityProvider
    fullName: Okta.Sdk.IIdentityProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IIdentityProvider
    name: IIdentityProvider
    nameWithType: IIdentityProvider
    fullName: Okta.Sdk.IIdentityProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUserActivationToken
  commentId: T:Okta.Sdk.IUserActivationToken
  parent: Okta.Sdk
  name: IUserActivationToken
  nameWithType: IUserActivationToken
  fullName: Okta.Sdk.IUserActivationToken
- uid: Okta.Sdk.IUsersClient.ActivateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ActivateUserAsync
  name: ActivateUserAsync
  nameWithType: IUsersClient.ActivateUserAsync
  fullName: Okta.Sdk.IUsersClient.ActivateUserAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IUserActivationToken}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IUserActivationToken}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserActivationToken>
  nameWithType: Task<IUserActivationToken>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IUserActivationToken>
  nameWithType.vb: Task(Of IUserActivationToken)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IUserActivationToken)
  name.vb: Task(Of IUserActivationToken)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IUserActivationToken
    name: IUserActivationToken
    nameWithType: IUserActivationToken
    fullName: Okta.Sdk.IUserActivationToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IUserActivationToken
    name: IUserActivationToken
    nameWithType: IUserActivationToken
    fullName: Okta.Sdk.IUserActivationToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.DeactivateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.DeactivateUserAsync
  name: DeactivateUserAsync
  nameWithType: IUsersClient.DeactivateUserAsync
  fullName: Okta.Sdk.IUsersClient.DeactivateUserAsync
- uid: Okta.Sdk.IUsersClient.ExpirePasswordAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ExpirePasswordAsync
  name: ExpirePasswordAsync
  nameWithType: IUsersClient.ExpirePasswordAsync
  fullName: Okta.Sdk.IUsersClient.ExpirePasswordAsync
- uid: Okta.Sdk.ITempPassword
  commentId: T:Okta.Sdk.ITempPassword
  parent: Okta.Sdk
  name: ITempPassword
  nameWithType: ITempPassword
  fullName: Okta.Sdk.ITempPassword
- uid: Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync
  name: ExpirePasswordAndGetTemporaryPasswordAsync
  nameWithType: IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync
  fullName: Okta.Sdk.IUsersClient.ExpirePasswordAndGetTemporaryPasswordAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.ITempPassword}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.ITempPassword}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ITempPassword>
  nameWithType: Task<ITempPassword>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.ITempPassword>
  nameWithType.vb: Task(Of ITempPassword)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.ITempPassword)
  name.vb: Task(Of ITempPassword)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ITempPassword
    name: ITempPassword
    nameWithType: ITempPassword
    fullName: Okta.Sdk.ITempPassword
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ITempPassword
    name: ITempPassword
    nameWithType: ITempPassword
    fullName: Okta.Sdk.ITempPassword
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.ReactivateUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ReactivateUserAsync
  name: ReactivateUserAsync
  nameWithType: IUsersClient.ReactivateUserAsync
  fullName: Okta.Sdk.IUsersClient.ReactivateUserAsync
- uid: Okta.Sdk.IUsersClient.ResetFactorsAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ResetFactorsAsync
  name: ResetFactorsAsync
  nameWithType: IUsersClient.ResetFactorsAsync
  fullName: Okta.Sdk.IUsersClient.ResetFactorsAsync
- uid: Okta.Sdk.IResetPasswordToken
  commentId: T:Okta.Sdk.IResetPasswordToken
  parent: Okta.Sdk
  name: IResetPasswordToken
  nameWithType: IResetPasswordToken
  fullName: Okta.Sdk.IResetPasswordToken
- uid: Okta.Sdk.IUsersClient.ResetPasswordAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ResetPasswordAsync
  name: ResetPasswordAsync
  nameWithType: IUsersClient.ResetPasswordAsync
  fullName: Okta.Sdk.IUsersClient.ResetPasswordAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IResetPasswordToken}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IResetPasswordToken}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IResetPasswordToken>
  nameWithType: Task<IResetPasswordToken>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IResetPasswordToken>
  nameWithType.vb: Task(Of IResetPasswordToken)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IResetPasswordToken)
  name.vb: Task(Of IResetPasswordToken)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IResetPasswordToken
    name: IResetPasswordToken
    nameWithType: IResetPasswordToken
    fullName: Okta.Sdk.IResetPasswordToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IResetPasswordToken
    name: IResetPasswordToken
    nameWithType: IResetPasswordToken
    fullName: Okta.Sdk.IResetPasswordToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.SuspendUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.SuspendUserAsync
  name: SuspendUserAsync
  nameWithType: IUsersClient.SuspendUserAsync
  fullName: Okta.Sdk.IUsersClient.SuspendUserAsync
- uid: Okta.Sdk.IUsersClient.UnlockUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.UnlockUserAsync
  name: UnlockUserAsync
  nameWithType: IUsersClient.UnlockUserAsync
  fullName: Okta.Sdk.IUsersClient.UnlockUserAsync
- uid: Okta.Sdk.IUsersClient.UnsuspendUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.UnsuspendUserAsync
  name: UnsuspendUserAsync
  nameWithType: IUsersClient.UnsuspendUserAsync
  fullName: Okta.Sdk.IUsersClient.UnsuspendUserAsync
- uid: Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync
  name: RemoveLinkedObjectForUserAsync
  nameWithType: IUsersClient.RemoveLinkedObjectForUserAsync
  fullName: Okta.Sdk.IUsersClient.RemoveLinkedObjectForUserAsync
- uid: Okta.Sdk.IResponseLinks
  commentId: T:Okta.Sdk.IResponseLinks
  parent: Okta.Sdk
  name: IResponseLinks
  nameWithType: IResponseLinks
  fullName: Okta.Sdk.IResponseLinks
- uid: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser*
  commentId: Overload:Okta.Sdk.IUsersClient.GetLinkedObjectsForUser
  name: GetLinkedObjectsForUser
  nameWithType: IUsersClient.GetLinkedObjectsForUser
  fullName: Okta.Sdk.IUsersClient.GetLinkedObjectsForUser
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IResponseLinks}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IResponseLinks}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IResponseLinks>
  nameWithType: ICollectionClient<IResponseLinks>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IResponseLinks>
  nameWithType.vb: ICollectionClient(Of IResponseLinks)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IResponseLinks)
  name.vb: ICollectionClient(Of IResponseLinks)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IResponseLinks
    name: IResponseLinks
    nameWithType: IResponseLinks
    fullName: Okta.Sdk.IResponseLinks
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IResponseLinks
    name: IResponseLinks
    nameWithType: IResponseLinks
    fullName: Okta.Sdk.IResponseLinks
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IRole
  commentId: T:Okta.Sdk.IRole
  parent: Okta.Sdk
  name: IRole
  nameWithType: IRole
  fullName: Okta.Sdk.IRole
- uid: Okta.Sdk.IUsersClient.ListAssignedRolesForUser*
  commentId: Overload:Okta.Sdk.IUsersClient.ListAssignedRolesForUser
  name: ListAssignedRolesForUser
  nameWithType: IUsersClient.ListAssignedRolesForUser
  fullName: Okta.Sdk.IUsersClient.ListAssignedRolesForUser
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.IRole}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.IRole}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<IRole>
  nameWithType: ICollectionClient<IRole>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.IRole>
  nameWithType.vb: ICollectionClient(Of IRole)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.IRole)
  name.vb: ICollectionClient(Of IRole)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IRole
    name: IRole
    nameWithType: IRole
    fullName: Okta.Sdk.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IRole
    name: IRole
    nameWithType: IRole
    fullName: Okta.Sdk.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IAssignRoleRequest
  commentId: T:Okta.Sdk.IAssignRoleRequest
  parent: Okta.Sdk
  name: IAssignRoleRequest
  nameWithType: IAssignRoleRequest
  fullName: Okta.Sdk.IAssignRoleRequest
- uid: Okta.Sdk.IUsersClient.AssignRoleToUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.AssignRoleToUserAsync
  name: AssignRoleToUserAsync
  nameWithType: IUsersClient.AssignRoleToUserAsync
  fullName: Okta.Sdk.IUsersClient.AssignRoleToUserAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.IRole}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.IRole}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IRole>
  nameWithType: Task<IRole>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.IRole>
  nameWithType.vb: Task(Of IRole)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.IRole)
  name.vb: Task(Of IRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.IRole
    name: IRole
    nameWithType: IRole
    fullName: Okta.Sdk.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.IRole
    name: IRole
    nameWithType: IRole
    fullName: Okta.Sdk.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync
  name: RemoveRoleFromUserAsync
  nameWithType: IUsersClient.RemoveRoleFromUserAsync
  fullName: Okta.Sdk.IUsersClient.RemoveRoleFromUserAsync
- uid: Okta.Sdk.IUsersClient.GetUserRoleAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.GetUserRoleAsync
  name: GetUserRoleAsync
  nameWithType: IUsersClient.GetUserRoleAsync
  fullName: Okta.Sdk.IUsersClient.GetUserRoleAsync
- uid: Okta.Sdk.ICatalogApplication
  commentId: T:Okta.Sdk.ICatalogApplication
  parent: Okta.Sdk
  name: ICatalogApplication
  nameWithType: ICatalogApplication
  fullName: Okta.Sdk.ICatalogApplication
- uid: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser*
  commentId: Overload:Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser
  name: ListApplicationTargetsForApplicationAdministratorRoleForUser
  nameWithType: IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser
  fullName: Okta.Sdk.IUsersClient.ListApplicationTargetsForApplicationAdministratorRoleForUser
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.ICatalogApplication}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.ICatalogApplication}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<ICatalogApplication>
  nameWithType: ICollectionClient<ICatalogApplication>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.ICatalogApplication>
  nameWithType.vb: ICollectionClient(Of ICatalogApplication)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.ICatalogApplication)
  name.vb: ICollectionClient(Of ICatalogApplication)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ICatalogApplication
    name: ICatalogApplication
    nameWithType: ICatalogApplication
    fullName: Okta.Sdk.ICatalogApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ICatalogApplication
    name: ICatalogApplication
    nameWithType: ICatalogApplication
    fullName: Okta.Sdk.ICatalogApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync
  name: AddAllAppsAsTargetToRoleAsync
  nameWithType: IUsersClient.AddAllAppsAsTargetToRoleAsync
  fullName: Okta.Sdk.IUsersClient.AddAllAppsAsTargetToRoleAsync
- uid: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync
  name: RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync
  nameWithType: IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync
  fullName: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromApplicationAdministratorRoleForUserAsync
- uid: Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync
  name: AddApplicationTargetToAdminRoleForUserAsync
  nameWithType: IUsersClient.AddApplicationTargetToAdminRoleForUserAsync
  fullName: Okta.Sdk.IUsersClient.AddApplicationTargetToAdminRoleForUserAsync
- uid: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync
  name: RemoveApplicationTargetFromAdministratorRoleForUserAsync
  nameWithType: IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync
  fullName: Okta.Sdk.IUsersClient.RemoveApplicationTargetFromAdministratorRoleForUserAsync
- uid: Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync
  name: AddApplicationTargetToAppAdminRoleForUserAsync
  nameWithType: IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync
  fullName: Okta.Sdk.IUsersClient.AddApplicationTargetToAppAdminRoleForUserAsync
- uid: Okta.Sdk.IUsersClient.ListGroupTargetsForRole*
  commentId: Overload:Okta.Sdk.IUsersClient.ListGroupTargetsForRole
  name: ListGroupTargetsForRole
  nameWithType: IUsersClient.ListGroupTargetsForRole
  fullName: Okta.Sdk.IUsersClient.ListGroupTargetsForRole
- uid: Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync
  name: RemoveGroupTargetFromRoleAsync
  nameWithType: IUsersClient.RemoveGroupTargetFromRoleAsync
  fullName: Okta.Sdk.IUsersClient.RemoveGroupTargetFromRoleAsync
- uid: Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync
  name: AddGroupTargetToRoleAsync
  nameWithType: IUsersClient.AddGroupTargetToRoleAsync
  fullName: Okta.Sdk.IUsersClient.AddGroupTargetToRoleAsync
- uid: Okta.Sdk.IUsersClient.ClearUserSessionsAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.ClearUserSessionsAsync
  name: ClearUserSessionsAsync
  nameWithType: IUsersClient.ClearUserSessionsAsync
  fullName: Okta.Sdk.IUsersClient.ClearUserSessionsAsync
- uid: Okta.Sdk.ISubscription
  commentId: T:Okta.Sdk.ISubscription
  parent: Okta.Sdk
  name: ISubscription
  nameWithType: ISubscription
  fullName: Okta.Sdk.ISubscription
- uid: Okta.Sdk.IUsersClient.ListUserSubscriptions*
  commentId: Overload:Okta.Sdk.IUsersClient.ListUserSubscriptions
  name: ListUserSubscriptions
  nameWithType: IUsersClient.ListUserSubscriptions
  fullName: Okta.Sdk.IUsersClient.ListUserSubscriptions
- uid: Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
  commentId: T:Okta.Sdk.ICollectionClient{Okta.Sdk.ISubscription}
  parent: Okta.Sdk
  definition: Okta.Sdk.ICollectionClient`1
  name: ICollectionClient<ISubscription>
  nameWithType: ICollectionClient<ISubscription>
  fullName: Okta.Sdk.ICollectionClient<Okta.Sdk.ISubscription>
  nameWithType.vb: ICollectionClient(Of ISubscription)
  fullName.vb: Okta.Sdk.ICollectionClient(Of Okta.Sdk.ISubscription)
  name.vb: ICollectionClient(Of ISubscription)
  spec.csharp:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Okta.Sdk.ICollectionClient`1
    name: ICollectionClient
    nameWithType: ICollectionClient
    fullName: Okta.Sdk.ICollectionClient
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync*
  commentId: Overload:Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync
  name: GetUserSubscriptionByNotificationTypeAsync
  nameWithType: IUsersClient.GetUserSubscriptionByNotificationTypeAsync
  fullName: Okta.Sdk.IUsersClient.GetUserSubscriptionByNotificationTypeAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.ISubscription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ISubscription>
  nameWithType: Task<ISubscription>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.ISubscription>
  nameWithType.vb: Task(Of ISubscription)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.ISubscription)
  name.vb: Task(Of ISubscription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.ISubscription
    name: ISubscription
    nameWithType: ISubscription
    fullName: Okta.Sdk.ISubscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.CreateUserWithoutCredentialsOptions
  commentId: T:Okta.Sdk.CreateUserWithoutCredentialsOptions
  parent: Okta.Sdk
  name: CreateUserWithoutCredentialsOptions
  nameWithType: CreateUserWithoutCredentialsOptions
  fullName: Okta.Sdk.CreateUserWithoutCredentialsOptions
- uid: Okta.Sdk.CreateUserWithImportedHashedPasswordOptions
  commentId: T:Okta.Sdk.CreateUserWithImportedHashedPasswordOptions
  parent: Okta.Sdk
  name: CreateUserWithImportedHashedPasswordOptions
  nameWithType: CreateUserWithImportedHashedPasswordOptions
  fullName: Okta.Sdk.CreateUserWithImportedHashedPasswordOptions
- uid: Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions
  commentId: T:Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions
  parent: Okta.Sdk
  name: CreateUserWithPasswordImportInlineHookOptions
  nameWithType: CreateUserWithPasswordImportInlineHookOptions
  fullName: Okta.Sdk.CreateUserWithPasswordImportInlineHookOptions
- uid: Okta.Sdk.CreateUserWithRecoveryQuestionOptions
  commentId: T:Okta.Sdk.CreateUserWithRecoveryQuestionOptions
  parent: Okta.Sdk
  name: CreateUserWithRecoveryQuestionOptions
  nameWithType: CreateUserWithRecoveryQuestionOptions
  fullName: Okta.Sdk.CreateUserWithRecoveryQuestionOptions
- uid: Okta.Sdk.CreateUserWithPasswordOptions
  commentId: T:Okta.Sdk.CreateUserWithPasswordOptions
  parent: Okta.Sdk
  name: CreateUserWithPasswordOptions
  nameWithType: CreateUserWithPasswordOptions
  fullName: Okta.Sdk.CreateUserWithPasswordOptions
- uid: Okta.Sdk.CreateUserWithProviderOptions
  commentId: T:Okta.Sdk.CreateUserWithProviderOptions
  parent: Okta.Sdk
  name: CreateUserWithProviderOptions
  nameWithType: CreateUserWithProviderOptions
  fullName: Okta.Sdk.CreateUserWithProviderOptions
- uid: Okta.Sdk.UserCredentials
  commentId: T:Okta.Sdk.UserCredentials
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: Okta.Sdk.UserCredentials
- uid: Okta.Sdk.ChangePasswordOptions
  commentId: T:Okta.Sdk.ChangePasswordOptions
  parent: Okta.Sdk
  name: ChangePasswordOptions
  nameWithType: ChangePasswordOptions
  fullName: Okta.Sdk.ChangePasswordOptions
- uid: Okta.Sdk.ChangeRecoveryQuestionOptions
  commentId: T:Okta.Sdk.ChangeRecoveryQuestionOptions
  parent: Okta.Sdk
  name: ChangeRecoveryQuestionOptions
  nameWithType: ChangeRecoveryQuestionOptions
  fullName: Okta.Sdk.ChangeRecoveryQuestionOptions
