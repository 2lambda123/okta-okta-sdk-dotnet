### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter
  commentId: T:Okta.Sdk.Internal.RecursiveDictionaryConverter
  id: RecursiveDictionaryConverter
  parent: Okta.Sdk.Internal
  children:
  - Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert(System.Type)
  - Okta.Sdk.Internal.RecursiveDictionaryConverter.Create(System.Type)
  - Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: RecursiveDictionaryConverter
  nameWithType: RecursiveDictionaryConverter
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter
  type: Class
  source:
    remote:
      path: src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RecursiveDictionaryConverter
    path: ../src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
    startLine: 16
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nA JSON.NET converter that will deserialize objects into dictionaries.\nNested objects are recursively deserialized as nested dictionaries.\n"
  example: []
  syntax:
    content: 'public sealed class RecursiveDictionaryConverter : CustomCreationConverter<IDictionary<string, object>>'
    content.vb: >-
      Public NotInheritable Class RecursiveDictionaryConverter

          Inherits CustomCreationConverter(Of IDictionary(Of String, Object))
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  inheritedMembers:
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.Create(System.Type)
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanConvert(System.Type)
  - Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanWrite
  - Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.Create(System.Type)
  commentId: M:Okta.Sdk.Internal.RecursiveDictionaryConverter.Create(System.Type)
  id: Create(System.Type)
  parent: Okta.Sdk.Internal.RecursiveDictionaryConverter
  langs:
  - csharp
  - vb
  name: Create(Type)
  nameWithType: RecursiveDictionaryConverter.Create(Type)
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.Create(System.Type)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: Create
    path: ../src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
    startLine: 19
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  example: []
  syntax:
    content: public override IDictionary<string, object> Create(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    content.vb: Public Overrides Function Create(objectType As Type) As IDictionary(Of String, Object)
  overridden: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.Create(System.Type)
  overload: Okta.Sdk.Internal.RecursiveDictionaryConverter.Create*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert(System.Type)
  commentId: M:Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: Okta.Sdk.Internal.RecursiveDictionaryConverter
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  nameWithType: RecursiveDictionaryConverter.CanConvert(Type)
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: CanConvert
    path: ../src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
    startLine: 23
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
  overridden: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanConvert(System.Type)
  overload: Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Okta.Sdk.Internal.RecursiveDictionaryConverter
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: RecursiveDictionaryConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: ReadJson
    path: ../src/Okta.Sdk/Internal/RecursiveDictionaryConverter.cs
    startLine: 29
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  example: []
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
    - id: objectType
      type: System.Type
    - id: existingValue
      type: System.Object
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
    return:
      type: System.Object
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
  overridden: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  overload: Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Okta.Sdk.Internal
  commentId: N:Okta.Sdk.Internal
  name: Okta.Sdk.Internal
  nameWithType: Okta.Sdk.Internal
  fullName: Okta.Sdk.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  commentId: T:Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  nameWithType: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  commentId: T:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  parent: Newtonsoft.Json.Converters
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1
  name: CustomCreationConverter<IDictionary<String, Object>>
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object))
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CustomCreationConverter(Of IDictionary(Of String, Object))
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1
    name: CustomCreationConverter
    nameWithType: CustomCreationConverter
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1
    name: CustomCreationConverter
    nameWithType: CustomCreationConverter
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object)).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: CustomCreationConverter<IDictionary<String, Object>>.WriteJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: CustomCreationConverter(Of IDictionary(Of String, Object)).WriteJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object)).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: CustomCreationConverter<IDictionary<String, Object>>.ReadJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: CustomCreationConverter(Of IDictionary(Of String, Object)).ReadJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.Create(System.Type)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.Create(System.Type)
  parent: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
  name: Create(Type)
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>.Create(Type)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.Create(System.Type)
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object)).Create(Type)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).Create(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
    name: Create
    nameWithType: CustomCreationConverter<IDictionary<String, Object>>.Create
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
    name: Create
    nameWithType: CustomCreationConverter(Of IDictionary(Of String, Object)).Create
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanConvert(System.Type)
  parent: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
  name: CanConvert(Type)
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>.CanConvert(Type)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.CanConvert(System.Type)
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object)).CanConvert(Type)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: CustomCreationConverter<IDictionary<String, Object>>.CanConvert
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: CustomCreationConverter(Of IDictionary(Of String, Object)).CanConvert
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanWrite
  commentId: P:Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}.CanWrite
  parent: Newtonsoft.Json.Converters.CustomCreationConverter{System.Collections.Generic.IDictionary{System.String,System.Object}}
  definition: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite
  name: CanWrite
  nameWithType: CustomCreationConverter<IDictionary<String, Object>>.CanWrite
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<System.Collections.Generic.IDictionary<System.String, System.Object>>.CanWrite
  nameWithType.vb: CustomCreationConverter(Of IDictionary(Of String, Object)).CanWrite
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of System.Collections.Generic.IDictionary(Of System.String, System.Object)).CanWrite
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: JsonConverter.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: JsonConverter.WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  commentId: P:Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  nameWithType: JsonConverter.CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  commentId: P:Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  nameWithType: JsonConverter.CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1
  commentId: T:Newtonsoft.Json.Converters.CustomCreationConverter`1
  isExternal: true
  name: CustomCreationConverter<T>
  nameWithType: CustomCreationConverter<T>
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>
  nameWithType.vb: CustomCreationConverter(Of T)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T)
  name.vb: CustomCreationConverter(Of T)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1
    name: CustomCreationConverter
    nameWithType: CustomCreationConverter
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1
    name: CustomCreationConverter
    nameWithType: CustomCreationConverter
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters
  commentId: N:Newtonsoft.Json.Converters
  isExternal: true
  name: Newtonsoft.Json.Converters
  nameWithType: Newtonsoft.Json.Converters
  fullName: Newtonsoft.Json.Converters
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  nameWithType: CustomCreationConverter<T>.WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: CustomCreationConverter(Of T).WriteJson(JsonWriter, Object, JsonSerializer)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: CustomCreationConverter<T>.WriteJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    nameWithType: CustomCreationConverter(Of T).WriteJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).WriteJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    nameWithType: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  nameWithType: CustomCreationConverter<T>.ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  nameWithType.vb: CustomCreationConverter(Of T).ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: CustomCreationConverter<T>.ReadJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    nameWithType: CustomCreationConverter(Of T).ReadJson
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).ReadJson
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    nameWithType: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    nameWithType: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
  isExternal: true
  name: Create(Type)
  nameWithType: CustomCreationConverter<T>.Create(Type)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.Create(System.Type)
  nameWithType.vb: CustomCreationConverter(Of T).Create(Type)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).Create(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
    name: Create
    nameWithType: CustomCreationConverter<T>.Create
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)
    name: Create
    nameWithType: CustomCreationConverter(Of T).Create
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
  commentId: M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
  isExternal: true
  name: CanConvert(Type)
  nameWithType: CustomCreationConverter<T>.CanConvert(Type)
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.CanConvert(System.Type)
  nameWithType.vb: CustomCreationConverter(Of T).CanConvert(Type)
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: CustomCreationConverter<T>.CanConvert
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)
    name: CanConvert
    nameWithType: CustomCreationConverter(Of T).CanConvert
    fullName: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).CanConvert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite
  commentId: P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite
  isExternal: true
  name: CanWrite
  nameWithType: CustomCreationConverter<T>.CanWrite
  fullName: Newtonsoft.Json.Converters.CustomCreationConverter<T>.CanWrite
  nameWithType.vb: CustomCreationConverter(Of T).CanWrite
  fullName.vb: Newtonsoft.Json.Converters.CustomCreationConverter(Of T).CanWrite
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.Create*
  commentId: Overload:Okta.Sdk.Internal.RecursiveDictionaryConverter.Create
  name: Create
  nameWithType: RecursiveDictionaryConverter.Create
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.Create
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert*
  commentId: Overload:Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert
  name: CanConvert
  nameWithType: RecursiveDictionaryConverter.CanConvert
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.CanConvert
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson*
  commentId: Overload:Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson
  name: ReadJson
  nameWithType: RecursiveDictionaryConverter.ReadJson
  fullName: Okta.Sdk.Internal.RecursiveDictionaryConverter.ReadJson
- uid: Newtonsoft.Json.JsonReader
  commentId: T:Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  nameWithType: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  commentId: T:Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
