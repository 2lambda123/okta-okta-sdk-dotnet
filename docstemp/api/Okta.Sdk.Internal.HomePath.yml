### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.Internal.HomePath
  commentId: T:Okta.Sdk.Internal.HomePath
  id: HomePath
  parent: Okta.Sdk.Internal
  children:
  - Okta.Sdk.Internal.HomePath.GetHomePath
  - Okta.Sdk.Internal.HomePath.Resolve(System.String[])
  - Okta.Sdk.Internal.HomePath.TryGetHomePath(System.String@)
  langs:
  - csharp
  - vb
  name: HomePath
  nameWithType: HomePath
  fullName: Okta.Sdk.Internal.HomePath
  type: Class
  source:
    remote:
      path: src/Okta.Sdk/Internal/HomePath.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: HomePath
    path: ../src/Okta.Sdk/Internal/HomePath.cs
    startLine: 15
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nContains methods for resolving the home directory path.\n"
  example: []
  syntax:
    content: public static class HomePath
    content.vb: Public Module HomePath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Okta.Sdk.Internal.HomePath.Resolve(System.String[])
  commentId: M:Okta.Sdk.Internal.HomePath.Resolve(System.String[])
  id: Resolve(System.String[])
  parent: Okta.Sdk.Internal.HomePath
  langs:
  - csharp
  - vb
  name: Resolve(String[])
  nameWithType: HomePath.Resolve(String[])
  fullName: Okta.Sdk.Internal.HomePath.Resolve(System.String[])
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/HomePath.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: Resolve
    path: ../src/Okta.Sdk/Internal/HomePath.cs
    startLine: 25
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nResolves a collection of path segments with a home directory path.\n"
  remarks: "\nProvides support for Unix-like paths on Windows. If the first path segment starts with <code>~</code>, this segment is prepended with the home directory path.\n"
  example: []
  syntax:
    content: public static string Resolve(params string[] pathSegments)
    parameters:
    - id: pathSegments
      type: System.String[]
      description: The path segments.
    return:
      type: System.String
      description: A combined path which includes the resolved home directory path (if necessary). If home directory path cannot be resolved, returns null.
    content.vb: Public Shared Function Resolve(ParamArray pathSegments As String()) As String
  overload: Okta.Sdk.Internal.HomePath.Resolve*
  nameWithType.vb: HomePath.Resolve(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Okta.Sdk.Internal.HomePath.Resolve(System.String())
  name.vb: Resolve(String())
- uid: Okta.Sdk.Internal.HomePath.GetHomePath
  commentId: M:Okta.Sdk.Internal.HomePath.GetHomePath
  id: GetHomePath
  parent: Okta.Sdk.Internal.HomePath
  langs:
  - csharp
  - vb
  name: GetHomePath()
  nameWithType: HomePath.GetHomePath()
  fullName: Okta.Sdk.Internal.HomePath.GetHomePath()
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/HomePath.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetHomePath
    path: ../src/Okta.Sdk/Internal/HomePath.cs
    startLine: 55
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nResolves the current user&apos;s home directory path.\nThrows an exception if the path cannot be resolved.\n"
  example: []
  syntax:
    content: public static string GetHomePath()
    return:
      type: System.String
      description: The home path.
    content.vb: Public Shared Function GetHomePath As String
  overload: Okta.Sdk.Internal.HomePath.GetHomePath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Okta.Sdk.Internal.HomePath.TryGetHomePath(System.String@)
  commentId: M:Okta.Sdk.Internal.HomePath.TryGetHomePath(System.String@)
  id: TryGetHomePath(System.String@)
  parent: Okta.Sdk.Internal.HomePath
  langs:
  - csharp
  - vb
  name: TryGetHomePath(out String)
  nameWithType: HomePath.TryGetHomePath(out String)
  fullName: Okta.Sdk.Internal.HomePath.TryGetHomePath(out System.String)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/HomePath.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: TryGetHomePath
    path: ../src/Okta.Sdk/Internal/HomePath.cs
    startLine: 72
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nTries to resolve the current user&apos;s home directory path.\n"
  example: []
  syntax:
    content: public static bool TryGetHomePath(out string homePath)
    parameters:
    - id: homePath
      type: System.String
      description: 'Output: resolved home path.'
    return:
      type: System.Boolean
      description: true if home path was resolved; otherwise, false.
    content.vb: Public Shared Function TryGetHomePath(ByRef homePath As String) As Boolean
  overload: Okta.Sdk.Internal.HomePath.TryGetHomePath*
  nameWithType.vb: HomePath.TryGetHomePath(ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Okta.Sdk.Internal.HomePath.TryGetHomePath(ByRef System.String)
  name.vb: TryGetHomePath(ByRef String)
references:
- uid: Okta.Sdk.Internal
  commentId: N:Okta.Sdk.Internal
  name: Okta.Sdk.Internal
  nameWithType: Okta.Sdk.Internal
  fullName: Okta.Sdk.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Okta.Sdk.Internal.HomePath.Resolve*
  commentId: Overload:Okta.Sdk.Internal.HomePath.Resolve
  name: Resolve
  nameWithType: HomePath.Resolve
  fullName: Okta.Sdk.Internal.HomePath.Resolve
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Okta.Sdk.Internal.HomePath.GetHomePath*
  commentId: Overload:Okta.Sdk.Internal.HomePath.GetHomePath
  name: GetHomePath
  nameWithType: HomePath.GetHomePath
  fullName: Okta.Sdk.Internal.HomePath.GetHomePath
- uid: Okta.Sdk.Internal.HomePath.TryGetHomePath*
  commentId: Overload:Okta.Sdk.Internal.HomePath.TryGetHomePath
  name: TryGetHomePath
  nameWithType: HomePath.TryGetHomePath
  fullName: Okta.Sdk.Internal.HomePath.TryGetHomePath
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
