### YamlMime:ManagedReference
items:
- uid: Okta.Sdk.Internal.IDataStore
  commentId: T:Okta.Sdk.Internal.IDataStore
  id: IDataStore
  parent: Okta.Sdk.Internal
  children:
  - Okta.Sdk.Internal.IDataStore.DeleteAsync(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  - Okta.Sdk.Internal.IDataStore.GetArrayAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  - Okta.Sdk.Internal.IDataStore.GetAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  - Okta.Sdk.Internal.IDataStore.PostAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  - Okta.Sdk.Internal.IDataStore.PutAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  - Okta.Sdk.Internal.IDataStore.RequestExecutor
  - Okta.Sdk.Internal.IDataStore.Serializer
  langs:
  - csharp
  - vb
  name: IDataStore
  nameWithType: IDataStore
  fullName: Okta.Sdk.Internal.IDataStore
  type: Interface
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: IDataStore
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 14
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nCombines the concerns of making requests and serializing data into one interface.\n"
  example: []
  syntax:
    content: public interface IDataStore
    content.vb: Public Interface IDataStore
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Okta.Sdk.Internal.IDataStore.RequestExecutor
  commentId: P:Okta.Sdk.Internal.IDataStore.RequestExecutor
  id: RequestExecutor
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: RequestExecutor
  nameWithType: IDataStore.RequestExecutor
  fullName: Okta.Sdk.Internal.IDataStore.RequestExecutor
  type: Property
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: RequestExecutor
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 22
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nGets the <xref href=\"Okta.Sdk.Internal.IRequestExecutor?text=RequestExecutor\" data-throw-if-not-resolved=\"false\"></xref> used by this <xref href=\"Okta.Sdk.Internal.IDataStore?text=DataStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: IRequestExecutor RequestExecutor { get; }
    parameters: []
    return:
      type: Okta.Sdk.Internal.IRequestExecutor
      description: "\nThe <xref href=\"Okta.Sdk.Internal.IRequestExecutor?text=RequestExecutor\" data-throw-if-not-resolved=\"false\"></xref> used by this <xref href=\"Okta.Sdk.Internal.IDataStore?text=DataStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property RequestExecutor As IRequestExecutor
  overload: Okta.Sdk.Internal.IDataStore.RequestExecutor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Okta.Sdk.Internal.IDataStore.Serializer
  commentId: P:Okta.Sdk.Internal.IDataStore.Serializer
  id: Serializer
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: Serializer
  nameWithType: IDataStore.Serializer
  fullName: Okta.Sdk.Internal.IDataStore.Serializer
  type: Property
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: Serializer
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 30
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nGets the <xref href=\"Okta.Sdk.Internal.ISerializer?text=Serializer\" data-throw-if-not-resolved=\"false\"></xref> used by this <xref href=\"Okta.Sdk.Internal.IDataStore?text=DataStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: ISerializer Serializer { get; }
    parameters: []
    return:
      type: Okta.Sdk.Internal.ISerializer
      description: "\nThe <xref href=\"Okta.Sdk.Internal.ISerializer?text=Serializer\" data-throw-if-not-resolved=\"false\"></xref> used by this <xref href=\"Okta.Sdk.Internal.IDataStore?text=DataStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property Serializer As ISerializer
  overload: Okta.Sdk.Internal.IDataStore.Serializer*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Okta.Sdk.Internal.IDataStore.GetAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.Internal.IDataStore.GetAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  id: GetAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: GetAsync<T>(HttpRequest, RequestContext, CancellationToken)
  nameWithType: IDataStore.GetAsync<T>(HttpRequest, RequestContext, CancellationToken)
  fullName: Okta.Sdk.Internal.IDataStore.GetAsync<T>(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetAsync
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 41
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nGets a resource and deserializes it to a <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: >-
      Task<HttpResponse<T>> GetAsync<T>(HttpRequest request, RequestContext requestContext, CancellationToken cancellationToken)

          where T : Resource, new()
    parameters:
    - id: request
      type: Okta.Sdk.HttpRequest
      description: The HTTP request options.
    - id: requestContext
      type: Okta.Sdk.RequestContext
      description: Information about the upstream request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type to deserialize the returned data to.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{{T}}}
      description: The deserialized resource and <xref href="Okta.Sdk.HttpResponse" data-throw-if-not-resolved="false"></xref> data.
    content.vb: Function GetAsync(Of T As {Resource, New})(request As HttpRequest, requestContext As RequestContext, cancellationToken As CancellationToken) As Task(Of HttpResponse(Of T))
  overload: Okta.Sdk.Internal.IDataStore.GetAsync*
  exceptions:
  - type: Okta.Sdk.OktaApiException
    commentId: T:Okta.Sdk.OktaApiException
    description: An API error occurred.
  nameWithType.vb: IDataStore.GetAsync(Of T)(HttpRequest, RequestContext, CancellationToken)
  fullName.vb: Okta.Sdk.Internal.IDataStore.GetAsync(Of T)(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  name.vb: GetAsync(Of T)(HttpRequest, RequestContext, CancellationToken)
- uid: Okta.Sdk.Internal.IDataStore.GetArrayAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.Internal.IDataStore.GetArrayAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  id: GetArrayAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: GetArrayAsync<T>(HttpRequest, RequestContext, CancellationToken)
  nameWithType: IDataStore.GetArrayAsync<T>(HttpRequest, RequestContext, CancellationToken)
  fullName: Okta.Sdk.Internal.IDataStore.GetArrayAsync<T>(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: GetArrayAsync
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 53
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nGets an array of resources and deserializes each item to a <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: >-
      Task<HttpResponse<IEnumerable<T>>> GetArrayAsync<T>(HttpRequest request, RequestContext requestContext, CancellationToken cancellationToken)

          where T : IResource
    parameters:
    - id: request
      type: Okta.Sdk.HttpRequest
      description: The HTTP request options.
    - id: requestContext
      type: Okta.Sdk.RequestContext
      description: Information about the upstream request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: T
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type to deserialize the returned data to.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{System.Collections.Generic.IEnumerable{{T}}}}
      description: An array of deserialized resources and <xref href="Okta.Sdk.HttpResponse" data-throw-if-not-resolved="false"></xref> data.
    content.vb: Function GetArrayAsync(Of T As IResource)(request As HttpRequest, requestContext As RequestContext, cancellationToken As CancellationToken) As Task(Of HttpResponse(Of IEnumerable(Of T)))
  overload: Okta.Sdk.Internal.IDataStore.GetArrayAsync*
  exceptions:
  - type: Okta.Sdk.OktaApiException
    commentId: T:Okta.Sdk.OktaApiException
    description: An API error occurred.
  nameWithType.vb: IDataStore.GetArrayAsync(Of T)(HttpRequest, RequestContext, CancellationToken)
  fullName.vb: Okta.Sdk.Internal.IDataStore.GetArrayAsync(Of T)(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  name.vb: GetArrayAsync(Of T)(HttpRequest, RequestContext, CancellationToken)
- uid: Okta.Sdk.Internal.IDataStore.PostAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.Internal.IDataStore.PostAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  id: PostAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: PostAsync<TResponse>(HttpRequest, RequestContext, CancellationToken)
  nameWithType: IDataStore.PostAsync<TResponse>(HttpRequest, RequestContext, CancellationToken)
  fullName: Okta.Sdk.Internal.IDataStore.PostAsync<TResponse>(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: PostAsync
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 65
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nPosts data to an endpoint and deserializes the response to a <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: >-
      Task<HttpResponse<TResponse>> PostAsync<TResponse>(HttpRequest request, RequestContext requestContext, CancellationToken cancellationToken)

          where TResponse : Resource, new()
    parameters:
    - id: request
      type: Okta.Sdk.HttpRequest
      description: The HTTP request options.
    - id: requestContext
      type: Okta.Sdk.RequestContext
      description: Information about the upstream request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: TResponse
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type to deserialize the returned data to.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{{TResponse}}}
      description: The deserialized response resource and <xref href="Okta.Sdk.HttpResponse" data-throw-if-not-resolved="false"></xref> data.
    content.vb: Function PostAsync(Of TResponse As {Resource, New})(request As HttpRequest, requestContext As RequestContext, cancellationToken As CancellationToken) As Task(Of HttpResponse(Of TResponse))
  overload: Okta.Sdk.Internal.IDataStore.PostAsync*
  exceptions:
  - type: Okta.Sdk.OktaApiException
    commentId: T:Okta.Sdk.OktaApiException
    description: An API error occurred.
  nameWithType.vb: IDataStore.PostAsync(Of TResponse)(HttpRequest, RequestContext, CancellationToken)
  fullName.vb: Okta.Sdk.Internal.IDataStore.PostAsync(Of TResponse)(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  name.vb: PostAsync(Of TResponse)(HttpRequest, RequestContext, CancellationToken)
- uid: Okta.Sdk.Internal.IDataStore.PutAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.Internal.IDataStore.PutAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  id: PutAsync``1(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: PutAsync<TResponse>(HttpRequest, RequestContext, CancellationToken)
  nameWithType: IDataStore.PutAsync<TResponse>(HttpRequest, RequestContext, CancellationToken)
  fullName: Okta.Sdk.Internal.IDataStore.PutAsync<TResponse>(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: PutAsync
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 77
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nPuts data to an endpoint and deserializes the response to a <xref href=\"Okta.Sdk.Resource\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: >-
      Task<HttpResponse<TResponse>> PutAsync<TResponse>(HttpRequest request, RequestContext requestContext, CancellationToken cancellationToken)

          where TResponse : Resource, new()
    parameters:
    - id: request
      type: Okta.Sdk.HttpRequest
      description: The HTTP request options.
    - id: requestContext
      type: Okta.Sdk.RequestContext
      description: Information about the upstream request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    typeParameters:
    - id: TResponse
      description: The <xref href="Okta.Sdk.Resource" data-throw-if-not-resolved="false"></xref> type to deserialize the returned data to.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{{TResponse}}}
      description: The deserialized response resource and <xref href="Okta.Sdk.HttpResponse" data-throw-if-not-resolved="false"></xref> data.
    content.vb: Function PutAsync(Of TResponse As {Resource, New})(request As HttpRequest, requestContext As RequestContext, cancellationToken As CancellationToken) As Task(Of HttpResponse(Of TResponse))
  overload: Okta.Sdk.Internal.IDataStore.PutAsync*
  exceptions:
  - type: Okta.Sdk.OktaApiException
    commentId: T:Okta.Sdk.OktaApiException
    description: An API error occurred.
  nameWithType.vb: IDataStore.PutAsync(Of TResponse)(HttpRequest, RequestContext, CancellationToken)
  fullName.vb: Okta.Sdk.Internal.IDataStore.PutAsync(Of TResponse)(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  name.vb: PutAsync(Of TResponse)(HttpRequest, RequestContext, CancellationToken)
- uid: Okta.Sdk.Internal.IDataStore.DeleteAsync(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  commentId: M:Okta.Sdk.Internal.IDataStore.DeleteAsync(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  id: DeleteAsync(Okta.Sdk.HttpRequest,Okta.Sdk.RequestContext,System.Threading.CancellationToken)
  parent: Okta.Sdk.Internal.IDataStore
  langs:
  - csharp
  - vb
  name: DeleteAsync(HttpRequest, RequestContext, CancellationToken)
  nameWithType: IDataStore.DeleteAsync(HttpRequest, RequestContext, CancellationToken)
  fullName: Okta.Sdk.Internal.IDataStore.DeleteAsync(Okta.Sdk.HttpRequest, Okta.Sdk.RequestContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Okta.Sdk/Internal/IDataStore.cs
      branch: lr-docfx-gh-actions
      repo: https://github.com/okta/okta-sdk-dotnet.git
    id: DeleteAsync
    path: ../src/Okta.Sdk/Internal/IDataStore.cs
    startLine: 87
  assemblies:
  - Okta.Sdk
  namespace: Okta.Sdk.Internal
  summary: "\nDeletes a resource.\n"
  example: []
  syntax:
    content: Task<HttpResponse> DeleteAsync(HttpRequest request, RequestContext requestContext, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: Okta.Sdk.HttpRequest
      description: The HTTP request options.
    - id: requestContext
      type: Okta.Sdk.RequestContext
      description: Information about the upstream request.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse}
      description: The <xref href="Okta.Sdk.HttpResponse" data-throw-if-not-resolved="false"></xref> data.
    content.vb: Function DeleteAsync(request As HttpRequest, requestContext As RequestContext, cancellationToken As CancellationToken) As Task(Of HttpResponse)
  overload: Okta.Sdk.Internal.IDataStore.DeleteAsync*
references:
- uid: Okta.Sdk.Internal
  commentId: N:Okta.Sdk.Internal
  name: Okta.Sdk.Internal
  nameWithType: Okta.Sdk.Internal
  fullName: Okta.Sdk.Internal
- uid: Okta.Sdk.Internal.IRequestExecutor
  commentId: T:Okta.Sdk.Internal.IRequestExecutor
  parent: Okta.Sdk.Internal
  name: IRequestExecutor
  nameWithType: IRequestExecutor
  fullName: Okta.Sdk.Internal.IRequestExecutor
- uid: Okta.Sdk.Internal.IDataStore
  commentId: T:Okta.Sdk.Internal.IDataStore
  parent: Okta.Sdk.Internal
  name: IDataStore
  nameWithType: IDataStore
  fullName: Okta.Sdk.Internal.IDataStore
- uid: Okta.Sdk.Internal.IDataStore.RequestExecutor*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.RequestExecutor
  name: RequestExecutor
  nameWithType: IDataStore.RequestExecutor
  fullName: Okta.Sdk.Internal.IDataStore.RequestExecutor
- uid: Okta.Sdk.Internal.ISerializer
  commentId: T:Okta.Sdk.Internal.ISerializer
  parent: Okta.Sdk.Internal
  name: ISerializer
  nameWithType: ISerializer
  fullName: Okta.Sdk.Internal.ISerializer
- uid: Okta.Sdk.Internal.IDataStore.Serializer*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.Serializer
  name: Serializer
  nameWithType: IDataStore.Serializer
  fullName: Okta.Sdk.Internal.IDataStore.Serializer
- uid: Okta.Sdk.Resource
  commentId: T:Okta.Sdk.Resource
  parent: Okta.Sdk
  name: Resource
  nameWithType: Resource
  fullName: Okta.Sdk.Resource
- uid: Okta.Sdk.HttpResponse
  commentId: T:Okta.Sdk.HttpResponse
  parent: Okta.Sdk
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: Okta.Sdk.HttpResponse
- uid: Okta.Sdk.OktaApiException
  commentId: T:Okta.Sdk.OktaApiException
  name: OktaApiException
  nameWithType: OktaApiException
  fullName: Okta.Sdk.OktaApiException
- uid: Okta.Sdk.Internal.IDataStore.GetAsync*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.GetAsync
  name: GetAsync
  nameWithType: IDataStore.GetAsync
  fullName: Okta.Sdk.Internal.IDataStore.GetAsync
- uid: Okta.Sdk.HttpRequest
  commentId: T:Okta.Sdk.HttpRequest
  parent: Okta.Sdk
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: Okta.Sdk.HttpRequest
- uid: Okta.Sdk.RequestContext
  commentId: T:Okta.Sdk.RequestContext
  parent: Okta.Sdk
  name: RequestContext
  nameWithType: RequestContext
  fullName: Okta.Sdk.RequestContext
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{{T}}}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponse<T>>
  nameWithType: Task<HttpResponse<T>>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.HttpResponse<T>>
  nameWithType.vb: Task(Of HttpResponse(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.HttpResponse(Of T))
  name.vb: Task(Of HttpResponse(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk
  commentId: N:Okta.Sdk
  name: Okta.Sdk
  nameWithType: Okta.Sdk
  fullName: Okta.Sdk
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Okta.Sdk.Internal.IDataStore.GetArrayAsync*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.GetArrayAsync
  name: GetArrayAsync
  nameWithType: IDataStore.GetArrayAsync
  fullName: Okta.Sdk.Internal.IDataStore.GetArrayAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{System.Collections.Generic.IEnumerable{{T}}}}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{System.Collections.Generic.IEnumerable{``0}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponse<IEnumerable<T>>>
  nameWithType: Task<HttpResponse<IEnumerable<T>>>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.HttpResponse<System.Collections.Generic.IEnumerable<T>>>
  nameWithType.vb: Task(Of HttpResponse(Of IEnumerable(Of T)))
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.HttpResponse(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: Task(Of HttpResponse(Of IEnumerable(Of T)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.Internal.IDataStore.PostAsync*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.PostAsync
  name: PostAsync
  nameWithType: IDataStore.PostAsync
  fullName: Okta.Sdk.Internal.IDataStore.PostAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{{TResponse}}}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.HttpResponse{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponse<TResponse>>
  nameWithType: Task<HttpResponse<TResponse>>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.HttpResponse<TResponse>>
  nameWithType.vb: Task(Of HttpResponse(Of TResponse))
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.HttpResponse(Of TResponse))
  name.vb: Task(Of HttpResponse(Of TResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.HttpResponse`1
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Okta.Sdk.Internal.IDataStore.PutAsync*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.PutAsync
  name: PutAsync
  nameWithType: IDataStore.PutAsync
  fullName: Okta.Sdk.Internal.IDataStore.PutAsync
- uid: Okta.Sdk.Internal.IDataStore.DeleteAsync*
  commentId: Overload:Okta.Sdk.Internal.IDataStore.DeleteAsync
  name: DeleteAsync
  nameWithType: IDataStore.DeleteAsync
  fullName: Okta.Sdk.Internal.IDataStore.DeleteAsync
- uid: System.Threading.Tasks.Task{Okta.Sdk.HttpResponse}
  commentId: T:System.Threading.Tasks.Task{Okta.Sdk.HttpResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponse>
  nameWithType: Task<HttpResponse>
  fullName: System.Threading.Tasks.Task<Okta.Sdk.HttpResponse>
  nameWithType.vb: Task(Of HttpResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Okta.Sdk.HttpResponse)
  name.vb: Task(Of HttpResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Okta.Sdk.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Okta.Sdk.HttpResponse
    name: HttpResponse
    nameWithType: HttpResponse
    fullName: Okta.Sdk.HttpResponse
  - name: )
    nameWithType: )
    fullName: )
